<?php
namespace PHPMailer\PHPMailer; class PHPMailer { public $Priority; public $CharSet = 'iso-8859-1'; public $ContentType = 'text/plain'; public $Encoding = '8bit'; public $ErrorInfo = ''; public $From = 'root@localhost'; public $FromName = 'Root User'; public $Sender = ''; public $Subject = ''; public $Body = ''; public $AltBody = ''; public $Ical = ''; protected $MIMEBody = ''; protected $MIMEHeader = ''; protected $mailHeader = ''; public $WordWrap = 0; public $Mailer = 'mail'; public $Sendmail = '/usr/sbin/sendmail'; public $UseSendmailOptions = true; public $ConfirmReadingTo = ''; public $Hostname = ''; public $MessageID = ''; public $MessageDate = ''; public $Host = 'localhost'; public $Port = 25; public $Helo = ''; public $SMTPSecure = ''; public $SMTPAutoTLS = true; public $SMTPAuth = false; public $SMTPOptions = array(); public $Username = ''; public $Password = ''; public $AuthType = ''; protected $oauth; public $Timeout = 300; public $SMTPDebug = 0; public $Debugoutput = 'echo'; public $SMTPKeepAlive = false; public $SingleTo = false; protected $SingleToArray = array(); public $do_verp = false; public $AllowEmpty = false; public $DKIM_selector = ''; public $DKIM_identity = ''; public $DKIM_passphrase = ''; public $DKIM_domain = ''; public $DKIM_private = ''; public $DKIM_private_string = ''; public $action_function = ''; public $XMailer = ''; public static $validator = 'php'; protected $smtp; protected $to = array(); protected $cc = array(); protected $bcc = array(); protected $ReplyTo = array(); protected $all_recipients = array(); protected $RecipientsQueue = array(); protected $ReplyToQueue = array(); protected $attachment = array(); protected $CustomHeader = array(); protected $lastMessageID = ''; protected $message_type = ''; protected $boundary = array(); protected $language = array(); protected $error_count = 0; protected $sign_cert_file = ''; protected $sign_key_file = ''; protected $sign_extracerts_file = ''; protected $sign_key_pass = ''; protected $exceptions = false; protected $uniqueid = ''; const VERSION = '6.0.3'; const STOP_MESSAGE = 0; const STOP_CONTINUE = 1; const STOP_CRITICAL = 2; protected static $LE = '
'; const MAX_LINE_LENGTH = 998; const STD_LINE_LENGTH = 76; public function __construct($sp7c28a0 = null) { if (null !== $sp7c28a0) { $this->exceptions = (bool) $sp7c28a0; } $this->Debugoutput = strpos(PHP_SAPI, 'cli') !== false ? 'echo' : 'html'; } public function __destruct() { $this->smtpClose(); } private function spd1941b($spf5fcdd, $spde1bf7, $spd8923c, $sp1f44c9, $spfbee46) { if (ini_get('mbstring.func_overload') & 1) { $spde1bf7 = $this->secureHeader($spde1bf7); } else { $spde1bf7 = $this->encodeHeader($this->secureHeader($spde1bf7)); } if (!$this->UseSendmailOptions or null === $spfbee46) { $sp38622e = @mail($spf5fcdd, $spde1bf7, $spd8923c, $sp1f44c9); } else { $sp38622e = @mail($spf5fcdd, $spde1bf7, $spd8923c, $sp1f44c9, $spfbee46); } return $sp38622e; } protected function edebug($sp059473) { if ($this->SMTPDebug <= 0) { return; } if ($this->Debugoutput instanceof \Psr\Log\LoggerInterface) { $this->Debugoutput->debug($sp059473); return; } if (!in_array($this->Debugoutput, array('error_log', 'html', 'echo')) and is_callable($this->Debugoutput)) { call_user_func($this->Debugoutput, $sp059473, $this->SMTPDebug); return; } switch ($this->Debugoutput) { case 'error_log': error_log($sp059473); break; case 'html': echo htmlentities(preg_replace('/[\\r\\n]+/', '', $sp059473), ENT_QUOTES, 'UTF-8'), '<br>
'; break; case 'echo': default: $sp059473 = preg_replace('/\\r\\n|\\r/ms', '
', $sp059473); echo gmdate('Y-m-d H:i:s'), '	', trim(str_replace('
', '
                   	                  ', trim($sp059473))), '
'; } } public function isHTML($sp9c6c65 = true) { if ($sp9c6c65) { $this->ContentType = 'text/html'; } else { $this->ContentType = 'text/plain'; } } public function isSMTP() { $this->Mailer = 'smtp'; } public function isMail() { $this->Mailer = 'mail'; } public function isSendmail() { $spdc0b9c = ini_get('sendmail_path'); if (false === stripos($spdc0b9c, 'sendmail')) { $this->Sendmail = '/usr/sbin/sendmail'; } else { $this->Sendmail = $spdc0b9c; } $this->Mailer = 'sendmail'; } public function isQmail() { $spdc0b9c = ini_get('sendmail_path'); if (false === stripos($spdc0b9c, 'qmail')) { $this->Sendmail = '/var/qmail/bin/qmail-inject'; } else { $this->Sendmail = $spdc0b9c; } $this->Mailer = 'qmail'; } public function addAddress($sp6718e8, $spbc60b1 = '') { return $this->addOrEnqueueAnAddress('to', $sp6718e8, $spbc60b1); } public function addCC($sp6718e8, $spbc60b1 = '') { return $this->addOrEnqueueAnAddress('cc', $sp6718e8, $spbc60b1); } public function addBCC($sp6718e8, $spbc60b1 = '') { return $this->addOrEnqueueAnAddress('bcc', $sp6718e8, $spbc60b1); } public function addReplyTo($sp6718e8, $spbc60b1 = '') { return $this->addOrEnqueueAnAddress('Reply-To', $sp6718e8, $spbc60b1); } protected function addOrEnqueueAnAddress($spa38d74, $sp6718e8, $spbc60b1) { $sp6718e8 = trim($sp6718e8); $spbc60b1 = trim(preg_replace('/[\\r\\n]+/', '', $spbc60b1)); $sp64cbd4 = strrpos($sp6718e8, '@'); if (false === $sp64cbd4) { $spa09243 = sprintf('%s (%s): %s', $this->lang('invalid_address'), $spa38d74, $sp6718e8); $this->setError($spa09243); $this->edebug($spa09243); if ($this->exceptions) { throw new Exception($spa09243); } return false; } $spfbee46 = array($spa38d74, $sp6718e8, $spbc60b1); if ($this->has8bitChars(substr($sp6718e8, ++$sp64cbd4)) and static::idnSupported()) { if ('Reply-To' != $spa38d74) { if (!array_key_exists($sp6718e8, $this->RecipientsQueue)) { $this->RecipientsQueue[$sp6718e8] = $spfbee46; return true; } } else { if (!array_key_exists($sp6718e8, $this->ReplyToQueue)) { $this->ReplyToQueue[$sp6718e8] = $spfbee46; return true; } } return false; } return call_user_func_array(array($this, 'addAnAddress'), $spfbee46); } protected function addAnAddress($spa38d74, $sp6718e8, $spbc60b1 = '') { if (!in_array($spa38d74, array('to', 'cc', 'bcc', 'Reply-To'))) { $spa09243 = sprintf('%s: %s', $this->lang('Invalid recipient kind'), $spa38d74); $this->setError($spa09243); $this->edebug($spa09243); if ($this->exceptions) { throw new Exception($spa09243); } return false; } if (!static::validateAddress($sp6718e8)) { $spa09243 = sprintf('%s (%s): %s', $this->lang('invalid_address'), $spa38d74, $sp6718e8); $this->setError($spa09243); $this->edebug($spa09243); if ($this->exceptions) { throw new Exception($spa09243); } return false; } if ('Reply-To' != $spa38d74) { if (!array_key_exists(strtolower($sp6718e8), $this->all_recipients)) { $this->{$spa38d74}[] = array($sp6718e8, $spbc60b1); $this->all_recipients[strtolower($sp6718e8)] = true; return true; } } else { if (!array_key_exists(strtolower($sp6718e8), $this->ReplyTo)) { $this->ReplyTo[strtolower($sp6718e8)] = array($sp6718e8, $spbc60b1); return true; } } return false; } public static function parseAddresses($sp89e5e2, $spedea10 = true) { $sp15793c = array(); if ($spedea10 and function_exists('imap_rfc822_parse_adrlist')) { $sp96c104 = imap_rfc822_parse_adrlist($sp89e5e2, ''); foreach ($sp96c104 as $sp6718e8) { if ('.SYNTAX-ERROR.' != $sp6718e8->host) { if (static::validateAddress($sp6718e8->mailbox . '@' . $sp6718e8->host)) { $sp15793c[] = array('name' => property_exists($sp6718e8, 'personal') ? $sp6718e8->personal : '', 'address' => $sp6718e8->mailbox . '@' . $sp6718e8->host); } } } } else { $sp96c104 = explode(',', $sp89e5e2); foreach ($sp96c104 as $sp6718e8) { $sp6718e8 = trim($sp6718e8); if (strpos($sp6718e8, '<') === false) { if (static::validateAddress($sp6718e8)) { $sp15793c[] = array('name' => '', 'address' => $sp6718e8); } } else { list($spbc60b1, $spc81585) = explode('<', $sp6718e8); $spc81585 = trim(str_replace('>', '', $spc81585)); if (static::validateAddress($spc81585)) { $sp15793c[] = array('name' => trim(str_replace(array('"', '\''), '', $spbc60b1)), 'address' => $spc81585); } } } } return $sp15793c; } public function setFrom($sp6718e8, $spbc60b1 = '', $sp5ad9cc = true) { $sp6718e8 = trim($sp6718e8); $spbc60b1 = trim(preg_replace('/[\\r\\n]+/', '', $spbc60b1)); $sp64cbd4 = strrpos($sp6718e8, '@'); if (false === $sp64cbd4 or (!$this->has8bitChars(substr($sp6718e8, ++$sp64cbd4)) or !static::idnSupported()) and !static::validateAddress($sp6718e8)) { $spa09243 = sprintf('%s (From): %s', $this->lang('invalid_address'), $sp6718e8); $this->setError($spa09243); $this->edebug($spa09243); if ($this->exceptions) { throw new Exception($spa09243); } return false; } $this->From = $sp6718e8; $this->FromName = $spbc60b1; if ($sp5ad9cc) { if (empty($this->Sender)) { $this->Sender = $sp6718e8; } } return true; } public function getLastMessageID() { return $this->lastMessageID; } public static function validateAddress($sp6718e8, $sp57a220 = null) { if (null === $sp57a220) { $sp57a220 = static::$validator; } if (is_callable($sp57a220)) { return call_user_func($sp57a220, $sp6718e8); } if (strpos($sp6718e8, '
') !== false or strpos($sp6718e8, '') !== false) { return false; } switch ($sp57a220) { case 'pcre': case 'pcre8': return (bool) preg_match('/^(?!(?>(?1)"?(?>\\\\[ -~]|[^"])"?(?1)){255,})(?!(?>(?1)"?(?>\\\\[ -~]|[^"])"?(?1)){65,}@)' . '((?>(?>(?>((?>(?>(?>\\x0D\\x0A)?[\\t ])+|(?>[\\t ]*\\x0D\\x0A)?[\\t ]+)?)(\\((?>(?2)' . '(?>[\\x01-\\x08\\x0B\\x0C\\x0E-\'*-\\[\\]-\\x7F]|\\\\[\\x00-\\x7F]|(?3)))*(?2)\\)))+(?2))|(?2))?)' . '([!#-\'*+\\/-9=?^-~-]+|"(?>(?2)(?>[\\x01-\\x08\\x0B\\x0C\\x0E-!#-\\[\\]-\\x7F]|\\\\[\\x00-\\x7F]))*' . '(?2)")(?>(?1)\\.(?1)(?4))*(?1)@(?!(?1)[a-z0-9-]{64,})(?1)(?>([a-z0-9](?>[a-z0-9-]*[a-z0-9])?)' . '(?>(?1)\\.(?!(?1)[a-z0-9-]{64,})(?1)(?5)){0,126}|\\[(?:(?>IPv6:(?>([a-f0-9]{1,4})(?>:(?6)){7}' . '|(?!(?:.*[a-f0-9][:\\]]){8,})((?6)(?>:(?6)){0,6})?::(?7)?))|(?>(?>IPv6:(?>(?6)(?>:(?6)){5}:' . '|(?!(?:.*[a-f0-9]:){6,})(?8)?::(?>((?6)(?>:(?6)){0,4}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}' . '|[1-9]?[0-9])(?>\\.(?9)){3}))\\])(?1)$/isD', $sp6718e8); case 'html5': return (bool) preg_match('/^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}' . '[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/sD', $sp6718e8); case 'php': default: return (bool) filter_var($sp6718e8, FILTER_VALIDATE_EMAIL); } } public static function idnSupported() { return function_exists('idn_to_ascii') and function_exists('mb_convert_encoding'); } public function punyencodeAddress($sp6718e8) { $sp64cbd4 = strrpos($sp6718e8, '@'); if (static::idnSupported() and !empty($this->CharSet) and false !== $sp64cbd4) { $spc3ed80 = substr($sp6718e8, ++$sp64cbd4); if ($this->has8bitChars($spc3ed80) and @mb_check_encoding($spc3ed80, $this->CharSet)) { $spc3ed80 = mb_convert_encoding($spc3ed80, 'UTF-8', $this->CharSet); $spf75f09 = 0; $spa01bfa = idn_to_ascii($spc3ed80, $spf75f09, INTL_IDNA_VARIANT_UTS46); if (false !== $spa01bfa) { return substr($sp6718e8, 0, $sp64cbd4) . $spa01bfa; } } } return $sp6718e8; } public function send() { try { if (!$this->preSend()) { return false; } return $this->postSend(); } catch (Exception $sp74c4ef) { $this->mailHeader = ''; $this->setError($sp74c4ef->getMessage()); if ($this->exceptions) { throw $sp74c4ef; } return false; } } public function preSend() { if ('smtp' == $this->Mailer or 'mail' == $this->Mailer and stripos(PHP_OS, 'WIN') === 0) { static::setLE('
'); } else { static::setLE(PHP_EOL); } if (ini_get('mail.add_x_header') == 1 and 'mail' == $this->Mailer and stripos(PHP_OS, 'WIN') === 0 and (version_compare(PHP_VERSION, '7.0.0', '>=') and version_compare(PHP_VERSION, '7.0.17', '<') or version_compare(PHP_VERSION, '7.1.0', '>=') and version_compare(PHP_VERSION, '7.1.3', '<'))) { trigger_error('Your version of PHP is affected by a bug that may result in corrupted messages.' . ' To fix it, switch to sending using SMTP, disable the mail.add_x_header option in' . ' your php.ini, switch to MacOS or Linux, or upgrade your PHP to version 7.0.17+ or 7.1.3+.', E_USER_WARNING); } try { $this->error_count = 0; $this->mailHeader = ''; foreach (array_merge($this->RecipientsQueue, $this->ReplyToQueue) as $spfbee46) { $spfbee46[1] = $this->punyencodeAddress($spfbee46[1]); call_user_func_array(array($this, 'addAnAddress'), $spfbee46); } if (count($this->to) + count($this->cc) + count($this->bcc) < 1) { throw new Exception($this->lang('provide_address'), self::STOP_CRITICAL); } foreach (array('From', 'Sender', 'ConfirmReadingTo') as $sp89d8ed) { $this->{$sp89d8ed} = trim($this->{$sp89d8ed}); if (empty($this->{$sp89d8ed})) { continue; } $this->{$sp89d8ed} = $this->punyencodeAddress($this->{$sp89d8ed}); if (!static::validateAddress($this->{$sp89d8ed})) { $spa09243 = sprintf('%s (%s): %s', $this->lang('invalid_address'), $sp89d8ed, $this->{$sp89d8ed}); $this->setError($spa09243); $this->edebug($spa09243); if ($this->exceptions) { throw new Exception($spa09243); } return false; } } if ($this->alternativeExists()) { $this->ContentType = 'multipart/alternative'; } $this->setMessageType(); if (!$this->AllowEmpty and empty($this->Body)) { throw new Exception($this->lang('empty_message'), self::STOP_CRITICAL); } $this->Subject = trim($this->Subject); $this->MIMEHeader = ''; $this->MIMEBody = $this->createBody(); $sp2a3023 = $this->MIMEHeader; $this->MIMEHeader = $this->createHeader(); $this->MIMEHeader .= $sp2a3023; if ('mail' == $this->Mailer) { if (count($this->to) > 0) { $this->mailHeader .= $this->addrAppend('To', $this->to); } else { $this->mailHeader .= $this->headerLine('To', 'undisclosed-recipients:;'); } $this->mailHeader .= $this->headerLine('Subject', $this->encodeHeader($this->secureHeader($this->Subject))); } if (!empty($this->DKIM_domain) and !empty($this->DKIM_selector) and (!empty($this->DKIM_private_string) or !empty($this->DKIM_private) and file_exists($this->DKIM_private))) { $speed3ee = $this->DKIM_Add($this->MIMEHeader . $this->mailHeader, $this->encodeHeader($this->secureHeader($this->Subject)), $this->MIMEBody); $this->MIMEHeader = rtrim($this->MIMEHeader, '
 ') . static::$LE . static::normalizeBreaks($speed3ee) . static::$LE; } return true; } catch (Exception $sp74c4ef) { $this->setError($sp74c4ef->getMessage()); if ($this->exceptions) { throw $sp74c4ef; } return false; } } public function postSend() { try { switch ($this->Mailer) { case 'sendmail': case 'qmail': return $this->sendmailSend($this->MIMEHeader, $this->MIMEBody); case 'smtp': return $this->smtpSend($this->MIMEHeader, $this->MIMEBody); case 'mail': return $this->mailSend($this->MIMEHeader, $this->MIMEBody); default: $sp446fb9 = $this->Mailer . 'Send'; if (method_exists($this, $sp446fb9)) { return $this->{$sp446fb9}($this->MIMEHeader, $this->MIMEBody); } return $this->mailSend($this->MIMEHeader, $this->MIMEBody); } } catch (Exception $sp74c4ef) { $this->setError($sp74c4ef->getMessage()); $this->edebug($sp74c4ef->getMessage()); if ($this->exceptions) { throw $sp74c4ef; } } return false; } protected function sendmailSend($sp1f44c9, $spd8923c) { if (!empty($this->Sender) and self::isShellSafe($this->Sender)) { if ('qmail' == $this->Mailer) { $sp0945fe = '%s -f%s'; } else { $sp0945fe = '%s -oi -f%s -t'; } } else { if ('qmail' == $this->Mailer) { $sp0945fe = '%s'; } else { $sp0945fe = '%s -oi -t'; } } $sp836397 = sprintf($sp0945fe, escapeshellcmd($this->Sendmail), $this->Sender); if ($this->SingleTo) { foreach ($this->SingleToArray as $sp408392) { $sp6f1153 = @popen($sp836397, 'w'); if (!$sp6f1153) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } fwrite($sp6f1153, 'To: ' . $sp408392 . '
'); fwrite($sp6f1153, $sp1f44c9); fwrite($sp6f1153, $spd8923c); $sp38622e = pclose($sp6f1153); $this->doCallback($sp38622e == 0, array($sp408392), $this->cc, $this->bcc, $this->Subject, $spd8923c, $this->From, array()); if (0 !== $sp38622e) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } } } else { $sp6f1153 = @popen($sp836397, 'w'); if (!$sp6f1153) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } fwrite($sp6f1153, $sp1f44c9); fwrite($sp6f1153, $spd8923c); $sp38622e = pclose($sp6f1153); $this->doCallback($sp38622e == 0, $this->to, $this->cc, $this->bcc, $this->Subject, $spd8923c, $this->From, array()); if (0 !== $sp38622e) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } } return true; } protected static function isShellSafe($sp5afdf9) { if (escapeshellcmd($sp5afdf9) !== $sp5afdf9 or !in_array(escapeshellarg($sp5afdf9), array("'{$sp5afdf9}'", "\"{$sp5afdf9}\""))) { return false; } $spfbb891 = strlen($sp5afdf9); for ($sp6a95ff = 0; $sp6a95ff < $spfbb891; ++$sp6a95ff) { $spd75b4b = $sp5afdf9[$sp6a95ff]; if (!ctype_alnum($spd75b4b) && strpos('@_-.', $spd75b4b) === false) { return false; } } return true; } protected function mailSend($sp1f44c9, $spd8923c) { $spf16a05 = array(); foreach ($this->to as $sp83248a) { $spf16a05[] = $this->addrFormat($sp83248a); } $spf5fcdd = implode(', ', $spf16a05); $spfbee46 = null; if (!empty($this->Sender) and static::validateAddress($this->Sender)) { if (self::isShellSafe($this->Sender)) { $spfbee46 = sprintf('-f%s', $this->Sender); } } if (!empty($this->Sender) and static::validateAddress($this->Sender)) { $sp45a61c = ini_get('sendmail_from'); ini_set('sendmail_from', $this->Sender); } $sp38622e = false; if ($this->SingleTo and count($spf16a05) > 1) { foreach ($spf16a05 as $sp408392) { $sp38622e = $this->spd1941b($sp408392, $this->Subject, $spd8923c, $sp1f44c9, $spfbee46); $this->doCallback($sp38622e, array($sp408392), $this->cc, $this->bcc, $this->Subject, $spd8923c, $this->From, array()); } } else { $sp38622e = $this->spd1941b($spf5fcdd, $this->Subject, $spd8923c, $sp1f44c9, $spfbee46); $this->doCallback($sp38622e, $this->to, $this->cc, $this->bcc, $this->Subject, $spd8923c, $this->From, array()); } if (isset($sp45a61c)) { ini_set('sendmail_from', $sp45a61c); } if (!$sp38622e) { throw new Exception($this->lang('instantiate'), self::STOP_CRITICAL); } return true; } public function getSMTPInstance() { if (!is_object($this->smtp)) { $this->smtp = new SMTP(); } return $this->smtp; } public function setSMTPInstance(SMTP $spf16d78) { $this->smtp = $spf16d78; return $this->smtp; } protected function smtpSend($sp1f44c9, $spd8923c) { $sp3fb2dc = array(); if (!$this->smtpConnect($this->SMTPOptions)) { throw new Exception($this->lang('smtp_connect_failed'), self::STOP_CRITICAL); } if ('' == $this->Sender) { $sp1e3772 = $this->From; } else { $sp1e3772 = $this->Sender; } if (!$this->smtp->mail($sp1e3772)) { $this->setError($this->lang('from_failed') . $sp1e3772 . ' : ' . implode(',', $this->smtp->getError())); throw new Exception($this->ErrorInfo, self::STOP_CRITICAL); } $spaecb9d = array(); foreach (array($this->to, $this->cc, $this->bcc) as $spa1ab19) { foreach ($spa1ab19 as $spf5fcdd) { if (!$this->smtp->recipient($spf5fcdd[0])) { $sp317af6 = $this->smtp->getError(); $sp3fb2dc[] = array('to' => $spf5fcdd[0], 'error' => $sp317af6['detail']); $sp2ff474 = false; } else { $sp2ff474 = true; } $spaecb9d[] = array('issent' => $sp2ff474, 'to' => $spf5fcdd[0]); } } if (count($this->all_recipients) > count($sp3fb2dc) and !$this->smtp->data($sp1f44c9 . $spd8923c)) { throw new Exception($this->lang('data_not_accepted'), self::STOP_CRITICAL); } $sp7031c0 = $this->smtp->getLastTransactionID(); if ($this->SMTPKeepAlive) { $this->smtp->reset(); } else { $this->smtp->quit(); $this->smtp->close(); } foreach ($spaecb9d as $sp5bfffa) { $this->doCallback($sp5bfffa['issent'], array($sp5bfffa['to']), array(), array(), $this->Subject, $spd8923c, $this->From, array('smtp_transaction_id' => $sp7031c0)); } if (count($sp3fb2dc) > 0) { $spb588e6 = ''; foreach ($sp3fb2dc as $sp7e60da) { $spb588e6 .= $sp7e60da['to'] . ': ' . $sp7e60da['error']; } throw new Exception($this->lang('recipients_failed') . $spb588e6, self::STOP_CONTINUE); } return true; } public function smtpConnect($spb86d46 = null) { if (null === $this->smtp) { $this->smtp = $this->getSMTPInstance(); } if (null === $spb86d46) { $spb86d46 = $this->SMTPOptions; } if ($this->smtp->connected()) { return true; } $this->smtp->setTimeout($this->Timeout); $this->smtp->setDebugLevel($this->SMTPDebug); $this->smtp->setDebugOutput($this->Debugoutput); $this->smtp->setVerp($this->do_verp); $sp6514c3 = explode(';', $this->Host); $sp8ebc78 = null; foreach ($sp6514c3 as $spd54459) { $spc28e94 = array(); if (!preg_match('/^((ssl|tls):\\/\\/)*([a-zA-Z0-9\\.-]*|\\[[a-fA-F0-9:]+\\]):?([0-9]*)$/', trim($spd54459), $spc28e94)) { static::edebug($this->lang('connect_host') . ' ' . $spd54459); continue; } if (!static::isValidHost($spc28e94[3])) { static::edebug($this->lang('connect_host') . ' ' . $spd54459); continue; } $sp0f6b81 = ''; $sp8e70fa = $this->SMTPSecure; $sp6b274e = 'tls' == $this->SMTPSecure; if ('ssl' == $spc28e94[2] or '' == $spc28e94[2] and 'ssl' == $this->SMTPSecure) { $sp0f6b81 = 'ssl://'; $sp6b274e = false; $sp8e70fa = 'ssl'; } elseif ('tls' == $spc28e94[2]) { $sp6b274e = true; $sp8e70fa = 'tls'; } $spf00091 = defined('OPENSSL_ALGO_SHA256'); if ('tls' === $sp8e70fa or 'ssl' === $sp8e70fa) { if (!$spf00091) { throw new Exception($this->lang('extension_missing') . 'openssl', self::STOP_CRITICAL); } } $sp6f06d3 = $spc28e94[3]; $spc61fb5 = $this->Port; $spdf4d31 = (int) $spc28e94[4]; if ($spdf4d31 > 0 and $spdf4d31 < 65536) { $spc61fb5 = $spdf4d31; } if ($this->smtp->connect($sp0f6b81 . $sp6f06d3, $spc61fb5, $this->Timeout, $spb86d46)) { try { if ($this->Helo) { $sp4340c9 = $this->Helo; } else { $sp4340c9 = $this->serverHostname(); } $this->smtp->hello($sp4340c9); if ($this->SMTPAutoTLS and $spf00091 and 'ssl' != $sp8e70fa and $this->smtp->getServerExt('STARTTLS')) { $sp6b274e = true; } if ($sp6b274e) { if (!$this->smtp->startTLS()) { throw new Exception($this->lang('connect_host')); } $this->smtp->hello($sp4340c9); } if ($this->SMTPAuth) { if (!$this->smtp->authenticate($this->Username, $this->Password, $this->AuthType, $this->oauth)) { throw new Exception($this->lang('authenticate')); } } return true; } catch (Exception $sp74c4ef) { $sp8ebc78 = $sp74c4ef; $this->edebug($sp74c4ef->getMessage()); $this->smtp->quit(); } } } $this->smtp->close(); if ($this->exceptions and null !== $sp8ebc78) { throw $sp8ebc78; } return false; } public function smtpClose() { if (null !== $this->smtp) { if ($this->smtp->connected()) { $this->smtp->quit(); $this->smtp->close(); } } } public function setLanguage($sp051f61 = 'en', $spab4ff3 = '') { $spd2d88b = array('br' => 'pt_br', 'cz' => 'cs', 'dk' => 'da', 'no' => 'nb', 'se' => 'sv', 'sr' => 'rs'); if (isset($spd2d88b[$sp051f61])) { $sp051f61 = $spd2d88b[$sp051f61]; } $sp7ce697 = array('authenticate' => 'SMTP Error: Could not authenticate.', 'connect_host' => 'SMTP Error: Could not connect to SMTP host.', 'data_not_accepted' => 'SMTP Error: data not accepted.', 'empty_message' => 'Message body empty', 'encoding' => 'Unknown encoding: ', 'execute' => 'Could not execute: ', 'file_access' => 'Could not access file: ', 'file_open' => 'File Error: Could not open file: ', 'from_failed' => 'The following From address failed: ', 'instantiate' => 'Could not instantiate mail function.', 'invalid_address' => 'Invalid address: ', 'mailer_not_supported' => ' mailer is not supported.', 'provide_address' => 'You must provide at least one recipient email address.', 'recipients_failed' => 'SMTP Error: The following recipients failed: ', 'signing' => 'Signing Error: ', 'smtp_connect_failed' => 'SMTP connect() failed.', 'smtp_error' => 'SMTP server error: ', 'variable_set' => 'Cannot set or reset variable: ', 'extension_missing' => 'Extension missing: '); if (empty($spab4ff3)) { $spab4ff3 = __DIR__ . DIRECTORY_SEPARATOR . 'language' . DIRECTORY_SEPARATOR; } if (!preg_match('/^[a-z]{2}(?:_[a-zA-Z]{2})?$/', $sp051f61)) { $sp051f61 = 'en'; } $spef5f92 = true; $spbbaab5 = $spab4ff3 . 'phpmailer.lang-' . $sp051f61 . '.php'; if ('en' != $sp051f61) { if (!file_exists($spbbaab5)) { $spef5f92 = false; } else { $spef5f92 = (include $spbbaab5); } } $this->language = $sp7ce697; return (bool) $spef5f92; } public function getTranslations() { return $this->language; } public function addrAppend($spb40563, $spe4b06c) { $sp15793c = array(); foreach ($spe4b06c as $sp6718e8) { $sp15793c[] = $this->addrFormat($sp6718e8); } return $spb40563 . ': ' . implode(', ', $sp15793c) . static::$LE; } public function addrFormat($spe4b06c) { if (empty($spe4b06c[1])) { return $this->secureHeader($spe4b06c[0]); } return $this->encodeHeader($this->secureHeader($spe4b06c[1]), 'phrase') . ' <' . $this->secureHeader($spe4b06c[0]) . '>'; } public function wrapText($spd76c7f, $spfbb891, $sp409361 = false) { if ($sp409361) { $spfe67ca = sprintf(' =%s', static::$LE); } else { $spfe67ca = static::$LE; } $spd7ae44 = 'utf-8' == strtolower($this->CharSet); $sp1ec22e = strlen(static::$LE); $sp88330d = strlen(static::$LE); $spd76c7f = static::normalizeBreaks($spd76c7f); if (substr($spd76c7f, -$sp1ec22e) == static::$LE) { $spd76c7f = substr($spd76c7f, 0, -$sp1ec22e); } $sp53352b = explode(static::$LE, $spd76c7f); $spd76c7f = ''; foreach ($sp53352b as $spbd2d84) { $spd55129 = explode(' ', $spbd2d84); $sp4840f6 = ''; $sped78c9 = true; foreach ($spd55129 as $sp2967bf) { if ($sp409361 and strlen($sp2967bf) > $spfbb891) { $spb6d6a1 = $spfbb891 - strlen($sp4840f6) - $sp88330d; if (!$sped78c9) { if ($spb6d6a1 > 20) { $sp001c36 = $spb6d6a1; if ($spd7ae44) { $sp001c36 = $this->utf8CharBoundary($sp2967bf, $sp001c36); } elseif ('=' == substr($sp2967bf, $sp001c36 - 1, 1)) { --$sp001c36; } elseif ('=' == substr($sp2967bf, $sp001c36 - 2, 1)) { $sp001c36 -= 2; } $spb18790 = substr($sp2967bf, 0, $sp001c36); $sp2967bf = substr($sp2967bf, $sp001c36); $sp4840f6 .= ' ' . $spb18790; $spd76c7f .= $sp4840f6 . sprintf('=%s', static::$LE); } else { $spd76c7f .= $sp4840f6 . $spfe67ca; } $sp4840f6 = ''; } while (strlen($sp2967bf) > 0) { if ($spfbb891 <= 0) { break; } $sp001c36 = $spfbb891; if ($spd7ae44) { $sp001c36 = $this->utf8CharBoundary($sp2967bf, $sp001c36); } elseif ('=' == substr($sp2967bf, $sp001c36 - 1, 1)) { --$sp001c36; } elseif ('=' == substr($sp2967bf, $sp001c36 - 2, 1)) { $sp001c36 -= 2; } $spb18790 = substr($sp2967bf, 0, $sp001c36); $sp2967bf = substr($sp2967bf, $sp001c36); if (strlen($sp2967bf) > 0) { $spd76c7f .= $spb18790 . sprintf('=%s', static::$LE); } else { $sp4840f6 = $spb18790; } } } else { $sp4c5de6 = $sp4840f6; if (!$sped78c9) { $sp4840f6 .= ' '; } $sp4840f6 .= $sp2967bf; if (strlen($sp4840f6) > $spfbb891 and '' != $sp4c5de6) { $spd76c7f .= $sp4c5de6 . $spfe67ca; $sp4840f6 = $sp2967bf; } } $sped78c9 = false; } $spd76c7f .= $sp4840f6 . static::$LE; } return $spd76c7f; } public function utf8CharBoundary($sp493d20, $sp5fbdb6) { $sp70ef3e = false; $spec45f8 = 3; while (!$sp70ef3e) { $sp5f6efa = substr($sp493d20, $sp5fbdb6 - $spec45f8, $spec45f8); $sp8a7e3f = strpos($sp5f6efa, '='); if (false !== $sp8a7e3f) { $sp469568 = substr($sp493d20, $sp5fbdb6 - $spec45f8 + $sp8a7e3f + 1, 2); $spd41a23 = hexdec($sp469568); if ($spd41a23 < 128) { if ($sp8a7e3f > 0) { $sp5fbdb6 -= $spec45f8 - $sp8a7e3f; } $sp70ef3e = true; } elseif ($spd41a23 >= 192) { $sp5fbdb6 -= $spec45f8 - $sp8a7e3f; $sp70ef3e = true; } elseif ($spd41a23 < 192) { $spec45f8 += 3; } } else { $sp70ef3e = true; } } return $sp5fbdb6; } public function setWordWrap() { if ($this->WordWrap < 1) { return; } switch ($this->message_type) { case 'alt': case 'alt_inline': case 'alt_attach': case 'alt_inline_attach': $this->AltBody = $this->wrapText($this->AltBody, $this->WordWrap); break; default: $this->Body = $this->wrapText($this->Body, $this->WordWrap); break; } } public function createHeader() { $sp38622e = ''; $sp38622e .= $this->headerLine('Date', '' == $this->MessageDate ? self::rfcDate() : $this->MessageDate); if ($this->SingleTo) { if ('mail' != $this->Mailer) { foreach ($this->to as $sp83248a) { $this->SingleToArray[] = $this->addrFormat($sp83248a); } } } else { if (count($this->to) > 0) { if ('mail' != $this->Mailer) { $sp38622e .= $this->addrAppend('To', $this->to); } } elseif (count($this->cc) == 0) { $sp38622e .= $this->headerLine('To', 'undisclosed-recipients:;'); } } $sp38622e .= $this->addrAppend('From', array(array(trim($this->From), $this->FromName))); if (count($this->cc) > 0) { $sp38622e .= $this->addrAppend('Cc', $this->cc); } if (('sendmail' == $this->Mailer or 'qmail' == $this->Mailer or 'mail' == $this->Mailer) and count($this->bcc) > 0) { $sp38622e .= $this->addrAppend('Bcc', $this->bcc); } if (count($this->ReplyTo) > 0) { $sp38622e .= $this->addrAppend('Reply-To', $this->ReplyTo); } if ('mail' != $this->Mailer) { $sp38622e .= $this->headerLine('Subject', $this->encodeHeader($this->secureHeader($this->Subject))); } if ('' != $this->MessageID and preg_match('/^<.*@.*>$/', $this->MessageID)) { $this->lastMessageID = $this->MessageID; } else { $this->lastMessageID = sprintf('<%s@%s>', $this->uniqueid, $this->serverHostname()); } $sp38622e .= $this->headerLine('Message-ID', $this->lastMessageID); if (null !== $this->Priority) { $sp38622e .= $this->headerLine('X-Priority', $this->Priority); } if ('' == $this->XMailer) { $sp38622e .= $this->headerLine('X-Mailer', 'PHPMailer ' . self::VERSION . ' (https://github.com/PHPMailer/PHPMailer)'); } else { $sp7887c3 = trim($this->XMailer); if ($sp7887c3) { $sp38622e .= $this->headerLine('X-Mailer', $sp7887c3); } } if ('' != $this->ConfirmReadingTo) { $sp38622e .= $this->headerLine('Disposition-Notification-To', '<' . $this->ConfirmReadingTo . '>'); } foreach ($this->CustomHeader as $sp1f44c9) { $sp38622e .= $this->headerLine(trim($sp1f44c9[0]), $this->encodeHeader(trim($sp1f44c9[1]))); } if (!$this->sign_key_file) { $sp38622e .= $this->headerLine('MIME-Version', '1.0'); $sp38622e .= $this->getMailMIME(); } return $sp38622e; } public function getMailMIME() { $sp38622e = ''; $spa2973b = true; switch ($this->message_type) { case 'inline': $sp38622e .= $this->headerLine('Content-Type', 'multipart/related;'); $sp38622e .= $this->textLine('	boundary="' . $this->boundary[1] . '"'); break; case 'attach': case 'inline_attach': case 'alt_attach': case 'alt_inline_attach': $sp38622e .= $this->headerLine('Content-Type', 'multipart/mixed;'); $sp38622e .= $this->textLine('	boundary="' . $this->boundary[1] . '"'); break; case 'alt': case 'alt_inline': $sp38622e .= $this->headerLine('Content-Type', 'multipart/alternative;'); $sp38622e .= $this->textLine('	boundary="' . $this->boundary[1] . '"'); break; default: $sp38622e .= $this->textLine('Content-Type: ' . $this->ContentType . '; charset=' . $this->CharSet); $spa2973b = false; break; } if ('7bit' != $this->Encoding) { if ($spa2973b) { if ('8bit' == $this->Encoding) { $sp38622e .= $this->headerLine('Content-Transfer-Encoding', '8bit'); } } else { $sp38622e .= $this->headerLine('Content-Transfer-Encoding', $this->Encoding); } } if ('mail' != $this->Mailer) { $sp38622e .= static::$LE; } return $sp38622e; } public function getSentMIMEMessage() { return rtrim($this->MIMEHeader . $this->mailHeader, '
') . static::$LE . static::$LE . $this->MIMEBody; } protected function generateId() { $sp001c36 = 32; if (function_exists('random_bytes')) { $sp69d0e9 = random_bytes($sp001c36); } elseif (function_exists('openssl_random_pseudo_bytes')) { $sp69d0e9 = openssl_random_pseudo_bytes($sp001c36); } else { $sp69d0e9 = hash('sha256', uniqid((string) mt_rand(), true), true); } return str_replace(array('=', '+', '/'), '', base64_encode(hash('sha256', $sp69d0e9, true))); } public function createBody() { $spd8923c = ''; $this->uniqueid = $this->generateId(); $this->boundary[1] = 'b1_' . $this->uniqueid; $this->boundary[2] = 'b2_' . $this->uniqueid; $this->boundary[3] = 'b3_' . $this->uniqueid; if ($this->sign_key_file) { $spd8923c .= $this->getMailMIME() . static::$LE; } $this->setWordWrap(); $spadad23 = $this->Encoding; $sp195f52 = $this->CharSet; if ('8bit' == $spadad23 and !$this->has8bitChars($this->Body)) { $spadad23 = '7bit'; $sp195f52 = 'us-ascii'; } if ('base64' != $this->Encoding and static::hasLineLongerThanMax($this->Body)) { $spadad23 = 'quoted-printable'; } $sp7cdd86 = $this->Encoding; $spe38acf = $this->CharSet; if ('8bit' == $sp7cdd86 and !$this->has8bitChars($this->AltBody)) { $sp7cdd86 = '7bit'; $spe38acf = 'us-ascii'; } if ('base64' != $sp7cdd86 and static::hasLineLongerThanMax($this->AltBody)) { $sp7cdd86 = 'quoted-printable'; } $sp74e590 = 'This is a multi-part message in MIME format.' . static::$LE; switch ($this->message_type) { case 'inline': $spd8923c .= $sp74e590; $spd8923c .= $this->getBoundary($this->boundary[1], $sp195f52, '', $spadad23); $spd8923c .= $this->encodeString($this->Body, $spadad23); $spd8923c .= static::$LE; $spd8923c .= $this->attachAll('inline', $this->boundary[1]); break; case 'attach': $spd8923c .= $sp74e590; $spd8923c .= $this->getBoundary($this->boundary[1], $sp195f52, '', $spadad23); $spd8923c .= $this->encodeString($this->Body, $spadad23); $spd8923c .= static::$LE; $spd8923c .= $this->attachAll('attachment', $this->boundary[1]); break; case 'inline_attach': $spd8923c .= $sp74e590; $spd8923c .= $this->textLine('--' . $this->boundary[1]); $spd8923c .= $this->headerLine('Content-Type', 'multipart/related;'); $spd8923c .= $this->textLine('	boundary="' . $this->boundary[2] . '"'); $spd8923c .= static::$LE; $spd8923c .= $this->getBoundary($this->boundary[2], $sp195f52, '', $spadad23); $spd8923c .= $this->encodeString($this->Body, $spadad23); $spd8923c .= static::$LE; $spd8923c .= $this->attachAll('inline', $this->boundary[2]); $spd8923c .= static::$LE; $spd8923c .= $this->attachAll('attachment', $this->boundary[1]); break; case 'alt': $spd8923c .= $sp74e590; $spd8923c .= $this->getBoundary($this->boundary[1], $spe38acf, 'text/plain', $sp7cdd86); $spd8923c .= $this->encodeString($this->AltBody, $sp7cdd86); $spd8923c .= static::$LE; $spd8923c .= $this->getBoundary($this->boundary[1], $sp195f52, 'text/html', $spadad23); $spd8923c .= $this->encodeString($this->Body, $spadad23); $spd8923c .= static::$LE; if (!empty($this->Ical)) { $spd8923c .= $this->getBoundary($this->boundary[1], '', 'text/calendar; method=REQUEST', ''); $spd8923c .= $this->encodeString($this->Ical, $this->Encoding); $spd8923c .= static::$LE; } $spd8923c .= $this->endBoundary($this->boundary[1]); break; case 'alt_inline': $spd8923c .= $sp74e590; $spd8923c .= $this->getBoundary($this->boundary[1], $spe38acf, 'text/plain', $sp7cdd86); $spd8923c .= $this->encodeString($this->AltBody, $sp7cdd86); $spd8923c .= static::$LE; $spd8923c .= $this->textLine('--' . $this->boundary[1]); $spd8923c .= $this->headerLine('Content-Type', 'multipart/related;'); $spd8923c .= $this->textLine('	boundary="' . $this->boundary[2] . '"'); $spd8923c .= static::$LE; $spd8923c .= $this->getBoundary($this->boundary[2], $sp195f52, 'text/html', $spadad23); $spd8923c .= $this->encodeString($this->Body, $spadad23); $spd8923c .= static::$LE; $spd8923c .= $this->attachAll('inline', $this->boundary[2]); $spd8923c .= static::$LE; $spd8923c .= $this->endBoundary($this->boundary[1]); break; case 'alt_attach': $spd8923c .= $sp74e590; $spd8923c .= $this->textLine('--' . $this->boundary[1]); $spd8923c .= $this->headerLine('Content-Type', 'multipart/alternative;'); $spd8923c .= $this->textLine('	boundary="' . $this->boundary[2] . '"'); $spd8923c .= static::$LE; $spd8923c .= $this->getBoundary($this->boundary[2], $spe38acf, 'text/plain', $sp7cdd86); $spd8923c .= $this->encodeString($this->AltBody, $sp7cdd86); $spd8923c .= static::$LE; $spd8923c .= $this->getBoundary($this->boundary[2], $sp195f52, 'text/html', $spadad23); $spd8923c .= $this->encodeString($this->Body, $spadad23); $spd8923c .= static::$LE; if (!empty($this->Ical)) { $spd8923c .= $this->getBoundary($this->boundary[2], '', 'text/calendar; method=REQUEST', ''); $spd8923c .= $this->encodeString($this->Ical, $this->Encoding); } $spd8923c .= $this->endBoundary($this->boundary[2]); $spd8923c .= static::$LE; $spd8923c .= $this->attachAll('attachment', $this->boundary[1]); break; case 'alt_inline_attach': $spd8923c .= $sp74e590; $spd8923c .= $this->textLine('--' . $this->boundary[1]); $spd8923c .= $this->headerLine('Content-Type', 'multipart/alternative;'); $spd8923c .= $this->textLine('	boundary="' . $this->boundary[2] . '"'); $spd8923c .= static::$LE; $spd8923c .= $this->getBoundary($this->boundary[2], $spe38acf, 'text/plain', $sp7cdd86); $spd8923c .= $this->encodeString($this->AltBody, $sp7cdd86); $spd8923c .= static::$LE; $spd8923c .= $this->textLine('--' . $this->boundary[2]); $spd8923c .= $this->headerLine('Content-Type', 'multipart/related;'); $spd8923c .= $this->textLine('	boundary="' . $this->boundary[3] . '"'); $spd8923c .= static::$LE; $spd8923c .= $this->getBoundary($this->boundary[3], $sp195f52, 'text/html', $spadad23); $spd8923c .= $this->encodeString($this->Body, $spadad23); $spd8923c .= static::$LE; $spd8923c .= $this->attachAll('inline', $this->boundary[3]); $spd8923c .= static::$LE; $spd8923c .= $this->endBoundary($this->boundary[2]); $spd8923c .= static::$LE; $spd8923c .= $this->attachAll('attachment', $this->boundary[1]); break; default: $this->Encoding = $spadad23; $spd8923c .= $this->encodeString($this->Body, $this->Encoding); break; } if ($this->isError()) { $spd8923c = ''; if ($this->exceptions) { throw new Exception($this->lang('empty_message'), self::STOP_CRITICAL); } } elseif ($this->sign_key_file) { try { if (!defined('PKCS7_TEXT')) { throw new Exception($this->lang('extension_missing') . 'openssl'); } $sp6b4670 = tempnam(sys_get_temp_dir(), 'mail'); if (false === file_put_contents($sp6b4670, $spd8923c)) { throw new Exception($this->lang('signing') . ' Could not write temp file'); } $spc518fd = tempnam(sys_get_temp_dir(), 'signed'); if (empty($this->sign_extracerts_file)) { $sp60f657 = @openssl_pkcs7_sign($sp6b4670, $spc518fd, 'file://' . realpath($this->sign_cert_file), array('file://' . realpath($this->sign_key_file), $this->sign_key_pass), array()); } else { $sp60f657 = @openssl_pkcs7_sign($sp6b4670, $spc518fd, 'file://' . realpath($this->sign_cert_file), array('file://' . realpath($this->sign_key_file), $this->sign_key_pass), array(), PKCS7_DETACHED, $this->sign_extracerts_file); } @unlink($sp6b4670); if ($sp60f657) { $spd8923c = file_get_contents($spc518fd); @unlink($spc518fd); $sp34e339 = explode('

', $spd8923c, 2); $this->MIMEHeader .= $sp34e339[0] . static::$LE . static::$LE; $spd8923c = $sp34e339[1]; } else { @unlink($spc518fd); throw new Exception($this->lang('signing') . openssl_error_string()); } } catch (Exception $sp74c4ef) { $spd8923c = ''; if ($this->exceptions) { throw $sp74c4ef; } } } return $spd8923c; } protected function getBoundary($sp6d2811, $spdb8143, $sp9dd7f7, $spceb56b) { $sp38622e = ''; if ('' == $spdb8143) { $spdb8143 = $this->CharSet; } if ('' == $sp9dd7f7) { $sp9dd7f7 = $this->ContentType; } if ('' == $spceb56b) { $spceb56b = $this->Encoding; } $sp38622e .= $this->textLine('--' . $sp6d2811); $sp38622e .= sprintf('Content-Type: %s; charset=%s', $sp9dd7f7, $spdb8143); $sp38622e .= static::$LE; if ('7bit' != $spceb56b) { $sp38622e .= $this->headerLine('Content-Transfer-Encoding', $spceb56b); } $sp38622e .= static::$LE; return $sp38622e; } protected function endBoundary($sp6d2811) { return static::$LE . '--' . $sp6d2811 . '--' . static::$LE; } protected function setMessageType() { $spb40563 = array(); if ($this->alternativeExists()) { $spb40563[] = 'alt'; } if ($this->inlineImageExists()) { $spb40563[] = 'inline'; } if ($this->attachmentExists()) { $spb40563[] = 'attach'; } $this->message_type = implode('_', $spb40563); if ('' == $this->message_type) { $this->message_type = 'plain'; } } public function headerLine($spbc60b1, $spc1f8c3) { return $spbc60b1 . ': ' . $spc1f8c3 . static::$LE; } public function textLine($spc1f8c3) { return $spc1f8c3 . static::$LE; } public function addAttachment($sp92b2da, $spbc60b1 = '', $spceb56b = 'base64', $spb40563 = '', $spff14cd = 'attachment') { try { if (!@is_file($sp92b2da)) { throw new Exception($this->lang('file_access') . $sp92b2da, self::STOP_CONTINUE); } if ('' == $spb40563) { $spb40563 = static::filenameToType($sp92b2da); } $spc7fe48 = basename($sp92b2da); if ('' == $spbc60b1) { $spbc60b1 = $spc7fe48; } $this->attachment[] = array(0 => $sp92b2da, 1 => $spc7fe48, 2 => $spbc60b1, 3 => $spceb56b, 4 => $spb40563, 5 => false, 6 => $spff14cd, 7 => $spbc60b1); } catch (Exception $sp74c4ef) { $this->setError($sp74c4ef->getMessage()); $this->edebug($sp74c4ef->getMessage()); if ($this->exceptions) { throw $sp74c4ef; } return false; } return true; } public function getAttachments() { return $this->attachment; } protected function attachAll($spbf8d61, $sp6d2811) { $sp6ab6f4 = array(); $sp3f1934 = array(); $spb38d91 = array(); foreach ($this->attachment as $sp114712) { if ($sp114712[6] == $spbf8d61) { $sp5afdf9 = ''; $sp92b2da = ''; $spc7879d = $sp114712[5]; if ($spc7879d) { $sp5afdf9 = $sp114712[0]; } else { $sp92b2da = $sp114712[0]; } $sp283eb5 = hash('sha256', serialize($sp114712)); if (in_array($sp283eb5, $spb38d91)) { continue; } $spb38d91[] = $sp283eb5; $spbc60b1 = $sp114712[2]; $spceb56b = $sp114712[3]; $spb40563 = $sp114712[4]; $spff14cd = $sp114712[6]; $sp9b2056 = $sp114712[7]; if ('inline' == $spff14cd and array_key_exists($sp9b2056, $sp3f1934)) { continue; } $sp3f1934[$sp9b2056] = true; $sp6ab6f4[] = sprintf('--%s%s', $sp6d2811, static::$LE); if (!empty($spbc60b1)) { $sp6ab6f4[] = sprintf('Content-Type: %s; name="%s"%s', $spb40563, $this->encodeHeader($this->secureHeader($spbc60b1)), static::$LE); } else { $sp6ab6f4[] = sprintf('Content-Type: %s%s', $spb40563, static::$LE); } if ('7bit' != $spceb56b) { $sp6ab6f4[] = sprintf('Content-Transfer-Encoding: %s%s', $spceb56b, static::$LE); } if (!empty($sp9b2056)) { $sp6ab6f4[] = sprintf('Content-ID: <%s>%s', $sp9b2056, static::$LE); } if (!empty($spff14cd)) { $sp26b282 = $this->encodeHeader($this->secureHeader($spbc60b1)); if (preg_match('/[ \\(\\)<>@,;:\\"\\/\\[\\]\\?=]/', $sp26b282)) { $sp6ab6f4[] = sprintf('Content-Disposition: %s; filename="%s"%s', $spff14cd, $sp26b282, static::$LE . static::$LE); } else { if (!empty($sp26b282)) { $sp6ab6f4[] = sprintf('Content-Disposition: %s; filename=%s%s', $spff14cd, $sp26b282, static::$LE . static::$LE); } else { $sp6ab6f4[] = sprintf('Content-Disposition: %s%s', $spff14cd, static::$LE . static::$LE); } } } else { $sp6ab6f4[] = static::$LE; } if ($spc7879d) { $sp6ab6f4[] = $this->encodeString($sp5afdf9, $spceb56b); } else { $sp6ab6f4[] = $this->encodeFile($sp92b2da, $spceb56b); } if ($this->isError()) { return ''; } $sp6ab6f4[] = static::$LE; } } $sp6ab6f4[] = sprintf('--%s--%s', $sp6d2811, static::$LE); return implode('', $sp6ab6f4); } protected function encodeFile($sp92b2da, $spceb56b = 'base64') { try { if (!file_exists($sp92b2da)) { throw new Exception($this->lang('file_open') . $sp92b2da, self::STOP_CONTINUE); } $sp8a28f7 = file_get_contents($sp92b2da); if (false === $sp8a28f7) { throw new Exception($this->lang('file_open') . $sp92b2da, self::STOP_CONTINUE); } $sp8a28f7 = $this->encodeString($sp8a28f7, $spceb56b); return $sp8a28f7; } catch (Exception $sp74c4ef) { $this->setError($sp74c4ef->getMessage()); return ''; } } public function encodeString($sp059473, $spceb56b = 'base64') { $sp1bbc87 = ''; switch (strtolower($spceb56b)) { case 'base64': $sp1bbc87 = chunk_split(base64_encode($sp059473), static::STD_LINE_LENGTH, static::$LE); break; case '7bit': case '8bit': $sp1bbc87 = static::normalizeBreaks($sp059473); if (substr($sp1bbc87, -strlen(static::$LE)) != static::$LE) { $sp1bbc87 .= static::$LE; } break; case 'binary': $sp1bbc87 = $sp059473; break; case 'quoted-printable': $sp1bbc87 = $this->encodeQP($sp059473); break; default: $this->setError($this->lang('encoding') . $spceb56b); break; } return $sp1bbc87; } public function encodeHeader($sp059473, $spdfbf6e = 'text') { $spcbf6c4 = 0; switch (strtolower($spdfbf6e)) { case 'phrase': if (!preg_match('/[\\200-\\377]/', $sp059473)) { $sp1bbc87 = addcslashes($sp059473, ' ..\\"'); if ($sp059473 == $sp1bbc87 and !preg_match('/[^A-Za-z0-9!#$%&\'*+\\/=?^_`{|}~ -]/', $sp059473)) { return $sp1bbc87; } return "\"{$sp1bbc87}\""; } $spcbf6c4 = preg_match_all('/[^\\040\\041\\043-\\133\\135-\\176]/', $sp059473, $spe080bd); break; case 'comment': $spcbf6c4 = preg_match_all('/[()"]/', $sp059473, $spe080bd); case 'text': default: $spcbf6c4 += preg_match_all('/[\\000-\\010\\013\\014\\016-\\037\\177-\\377]/', $sp059473, $spe080bd); break; } $spba52be = 'mail' == $this->Mailer ? 13 : 0; $sp609a10 = static::STD_LINE_LENGTH - $spba52be; if ($spcbf6c4 > strlen($sp059473) / 3) { $spceb56b = 'B'; $sp609a10 = static::STD_LINE_LENGTH - $spba52be - 8 - strlen($this->CharSet); if ($this->hasMultiBytes($sp059473)) { $sp1bbc87 = $this->base64EncodeWrapMB($sp059473, '
'); } else { $sp1bbc87 = base64_encode($sp059473); $sp609a10 -= $sp609a10 % 4; $sp1bbc87 = trim(chunk_split($sp1bbc87, $sp609a10, '
')); } $sp1bbc87 = preg_replace('/^(.*)$/m', ' =?' . $this->CharSet . "?{$spceb56b}?\\1?=", $sp1bbc87); } elseif ($spcbf6c4 > 0) { $spceb56b = 'Q'; $sp609a10 = static::STD_LINE_LENGTH - $spba52be - 8 - strlen($this->CharSet); $sp1bbc87 = $this->encodeQ($sp059473, $spdfbf6e); $sp1bbc87 = $this->wrapText($sp1bbc87, $sp609a10, true); $sp1bbc87 = str_replace('=' . static::$LE, '
', trim($sp1bbc87)); $sp1bbc87 = preg_replace('/^(.*)$/m', ' =?' . $this->CharSet . "?{$spceb56b}?\\1?=", $sp1bbc87); } elseif (strlen($sp059473) > $sp609a10) { $sp1bbc87 = trim($this->wrapText($sp059473, $sp609a10, false)); if ($sp059473 == $sp1bbc87) { $sp1bbc87 = trim(chunk_split($sp059473, static::STD_LINE_LENGTH, static::$LE)); } $sp1bbc87 = str_replace(static::$LE, '
', trim($sp1bbc87)); $sp1bbc87 = preg_replace('/^(.*)$/m', ' \\1', $sp1bbc87); } else { return $sp059473; } return trim(static::normalizeBreaks($sp1bbc87)); } public function hasMultiBytes($sp059473) { if (function_exists('mb_strlen')) { return strlen($sp059473) > mb_strlen($sp059473, $this->CharSet); } return false; } public function has8bitChars($sp2d0e1a) { return (bool) preg_match('/[\\x80-\\xFF]/', $sp2d0e1a); } public function base64EncodeWrapMB($sp059473, $sp80ed5d = null) { $sp302733 = '=?' . $this->CharSet . '?B?'; $sp60bcf5 = '?='; $sp1bbc87 = ''; if (null === $sp80ed5d) { $sp80ed5d = static::$LE; } $sp0f3bd6 = mb_strlen($sp059473, $this->CharSet); $spfbb891 = 75 - strlen($sp302733) - strlen($sp60bcf5); $spea2d3c = $sp0f3bd6 / strlen($sp059473); $spa1fcd2 = floor($spfbb891 * $spea2d3c * 0.75); for ($sp6a95ff = 0; $sp6a95ff < $sp0f3bd6; $sp6a95ff += $sp626d98) { $spec45f8 = 0; do { $sp626d98 = $spa1fcd2 - $spec45f8; $sp8f7d63 = mb_substr($sp059473, $sp6a95ff, $sp626d98, $this->CharSet); $sp8f7d63 = base64_encode($sp8f7d63); ++$spec45f8; } while (strlen($sp8f7d63) > $spfbb891); $sp1bbc87 .= $sp8f7d63 . $sp80ed5d; } return substr($sp1bbc87, 0, -strlen($sp80ed5d)); } public function encodeQP($sp5afdf9) { return static::normalizeBreaks(quoted_printable_encode($sp5afdf9)); } public function encodeQ($sp059473, $spdfbf6e = 'text') { $sp07e4f9 = ''; $sp1bbc87 = str_replace(array('', '
'), '', $sp059473); switch (strtolower($spdfbf6e)) { case 'phrase': $sp07e4f9 = '^A-Za-z0-9!*+\\/ -'; break; case 'comment': $sp07e4f9 = '\\(\\)"'; case 'text': default: $sp07e4f9 = '\\000-\\011\\013\\014\\016-\\037\\075\\077\\137\\177-\\377' . $sp07e4f9; break; } $spe080bd = array(); if (preg_match_all("/[{$sp07e4f9}]/", $sp1bbc87, $spe080bd)) { $sp732dc9 = array_search('=', $spe080bd[0]); if (false !== $sp732dc9) { unset($spe080bd[0][$sp732dc9]); array_unshift($spe080bd[0], '='); } foreach (array_unique($spe080bd[0]) as $spf0353e) { $sp1bbc87 = str_replace($spf0353e, '=' . sprintf('%02X', ord($spf0353e)), $sp1bbc87); } } return str_replace(' ', '_', $sp1bbc87); } public function addStringAttachment($sp5afdf9, $spc7fe48, $spceb56b = 'base64', $spb40563 = '', $spff14cd = 'attachment') { if ('' == $spb40563) { $spb40563 = static::filenameToType($spc7fe48); } $this->attachment[] = array(0 => $sp5afdf9, 1 => $spc7fe48, 2 => basename($spc7fe48), 3 => $spceb56b, 4 => $spb40563, 5 => true, 6 => $spff14cd, 7 => 0); } public function addEmbeddedImage($sp92b2da, $sp9b2056, $spbc60b1 = '', $spceb56b = 'base64', $spb40563 = '', $spff14cd = 'inline') { if (!@is_file($sp92b2da)) { $this->setError($this->lang('file_access') . $sp92b2da); return false; } if ('' == $spb40563) { $spb40563 = static::filenameToType($sp92b2da); } $spc7fe48 = basename($sp92b2da); if ('' == $spbc60b1) { $spbc60b1 = $spc7fe48; } $this->attachment[] = array(0 => $sp92b2da, 1 => $spc7fe48, 2 => $spbc60b1, 3 => $spceb56b, 4 => $spb40563, 5 => false, 6 => $spff14cd, 7 => $sp9b2056); return true; } public function addStringEmbeddedImage($sp5afdf9, $sp9b2056, $spbc60b1 = '', $spceb56b = 'base64', $spb40563 = '', $spff14cd = 'inline') { if ('' == $spb40563 and !empty($spbc60b1)) { $spb40563 = static::filenameToType($spbc60b1); } $this->attachment[] = array(0 => $sp5afdf9, 1 => $spbc60b1, 2 => $spbc60b1, 3 => $spceb56b, 4 => $spb40563, 5 => true, 6 => $spff14cd, 7 => $sp9b2056); return true; } protected function cidExists($sp9b2056) { foreach ($this->attachment as $sp114712) { if ('inline' == $sp114712[6] and $sp9b2056 == $sp114712[7]) { return true; } } return false; } public function inlineImageExists() { foreach ($this->attachment as $sp114712) { if ('inline' == $sp114712[6]) { return true; } } return false; } public function attachmentExists() { foreach ($this->attachment as $sp114712) { if ('attachment' == $sp114712[6]) { return true; } } return false; } public function alternativeExists() { return !empty($this->AltBody); } public function clearQueuedAddresses($spa38d74) { $this->RecipientsQueue = array_filter($this->RecipientsQueue, function ($spfbee46) use($spa38d74) { return $spfbee46[0] != $spa38d74; }); } public function clearAddresses() { foreach ($this->to as $spf5fcdd) { unset($this->all_recipients[strtolower($spf5fcdd[0])]); } $this->to = array(); $this->clearQueuedAddresses('to'); } public function clearCCs() { foreach ($this->cc as $spebf2d1) { unset($this->all_recipients[strtolower($spebf2d1[0])]); } $this->cc = array(); $this->clearQueuedAddresses('cc'); } public function clearBCCs() { foreach ($this->bcc as $sp642a57) { unset($this->all_recipients[strtolower($sp642a57[0])]); } $this->bcc = array(); $this->clearQueuedAddresses('bcc'); } public function clearReplyTos() { $this->ReplyTo = array(); $this->ReplyToQueue = array(); } public function clearAllRecipients() { $this->to = array(); $this->cc = array(); $this->bcc = array(); $this->all_recipients = array(); $this->RecipientsQueue = array(); } public function clearAttachments() { $this->attachment = array(); } public function clearCustomHeaders() { $this->CustomHeader = array(); } protected function setError($sp4fef11) { ++$this->error_count; if ('smtp' == $this->Mailer and null !== $this->smtp) { $sp071f19 = $this->smtp->getError(); if (!empty($sp071f19['error'])) { $sp4fef11 .= $this->lang('smtp_error') . $sp071f19['error']; if (!empty($sp071f19['detail'])) { $sp4fef11 .= ' Detail: ' . $sp071f19['detail']; } if (!empty($sp071f19['smtp_code'])) { $sp4fef11 .= ' SMTP code: ' . $sp071f19['smtp_code']; } if (!empty($sp071f19['smtp_code_ex'])) { $sp4fef11 .= ' Additional SMTP info: ' . $sp071f19['smtp_code_ex']; } } } $this->ErrorInfo = $sp4fef11; } public static function rfcDate() { date_default_timezone_set(@date_default_timezone_get()); return date('D, j M Y H:i:s O'); } protected function serverHostname() { $sp38622e = ''; if (!empty($this->Hostname)) { $sp38622e = $this->Hostname; } elseif (isset($_SERVER) and array_key_exists('SERVER_NAME', $_SERVER)) { $sp38622e = $_SERVER['SERVER_NAME']; } elseif (function_exists('gethostname') and gethostname() !== false) { $sp38622e = gethostname(); } elseif (php_uname('n') !== false) { $sp38622e = php_uname('n'); } if (!static::isValidHost($sp38622e)) { return 'localhost.localdomain'; } return $sp38622e; } public static function isValidHost($sp6f06d3) { if (empty($sp6f06d3) or !is_string($sp6f06d3) or strlen($sp6f06d3) > 256) { return false; } if (trim($sp6f06d3, '[]') != $sp6f06d3) { return (bool) filter_var(trim($sp6f06d3, '[]'), FILTER_VALIDATE_IP, FILTER_FLAG_IPV6); } if (is_numeric(str_replace('.', '', $sp6f06d3))) { return (bool) filter_var($sp6f06d3, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4); } if (filter_var('http://' . $sp6f06d3, FILTER_VALIDATE_URL, FILTER_FLAG_HOST_REQUIRED)) { return true; } return false; } protected function lang($spa6cb11) { if (count($this->language) < 1) { $this->setLanguage('en'); } if (array_key_exists($spa6cb11, $this->language)) { if ('smtp_connect_failed' == $spa6cb11) { return $this->language[$spa6cb11] . ' https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting'; } return $this->language[$spa6cb11]; } return $spa6cb11; } public function isError() { return $this->error_count > 0; } public function addCustomHeader($spbc60b1, $spc1f8c3 = null) { if (null === $spc1f8c3) { $this->CustomHeader[] = explode(':', $spbc60b1, 2); } else { $this->CustomHeader[] = array($spbc60b1, $spc1f8c3); } } public function getCustomHeaders() { return $this->CustomHeader; } public function msgHTML($spd76c7f, $sp4c9bb6 = '', $sp7c0188 = false) { preg_match_all('/(src|background)=["\'](.*)["\']/Ui', $spd76c7f, $sp736efc); if (array_key_exists(2, $sp736efc)) { if (strlen($sp4c9bb6) > 1 && '/' != substr($sp4c9bb6, -1)) { $sp4c9bb6 .= '/'; } foreach ($sp736efc[2] as $spb1f457 => $sp00ca70) { if (preg_match('#^data:(image/(?:jpe?g|gif|png));?(base64)?,(.+)#', $sp00ca70, $sp3befe4)) { if (count($sp3befe4) == 4 and 'base64' == $sp3befe4[2]) { $sp0a1a6a = base64_decode($sp3befe4[3]); } elseif ('' == $sp3befe4[2]) { $sp0a1a6a = rawurldecode($sp3befe4[3]); } else { continue; } $sp9b2056 = hash('sha256', $sp0a1a6a) . '@phpmailer.0'; if (!$this->cidExists($sp9b2056)) { $this->addStringEmbeddedImage($sp0a1a6a, $sp9b2056, 'embed' . $spb1f457, 'base64', $sp3befe4[1]); } $spd76c7f = str_replace($sp736efc[0][$spb1f457], $sp736efc[1][$spb1f457] . '="cid:' . $sp9b2056 . '"', $spd76c7f); continue; } if (!empty($sp4c9bb6) and strpos($sp00ca70, '..') === false and 0 !== strpos($sp00ca70, 'cid:') and !preg_match('#^[a-z][a-z0-9+.-]*:?//#i', $sp00ca70)) { $spc7fe48 = basename($sp00ca70); $spa474da = dirname($sp00ca70); if ('.' == $spa474da) { $spa474da = ''; } $sp9b2056 = hash('sha256', $sp00ca70) . '@phpmailer.0'; if (strlen($sp4c9bb6) > 1 and '/' != substr($sp4c9bb6, -1)) { $sp4c9bb6 .= '/'; } if (strlen($spa474da) > 1 and '/' != substr($spa474da, -1)) { $spa474da .= '/'; } if ($this->addEmbeddedImage($sp4c9bb6 . $spa474da . $spc7fe48, $sp9b2056, $spc7fe48, 'base64', static::_mime_types((string) static::mb_pathinfo($spc7fe48, PATHINFO_EXTENSION)))) { $spd76c7f = preg_replace('/' . $sp736efc[1][$spb1f457] . '=["\']' . preg_quote($sp00ca70, '/') . '["\']/Ui', $sp736efc[1][$spb1f457] . '="cid:' . $sp9b2056 . '"', $spd76c7f); } } } } $this->isHTML(true); $this->Body = static::normalizeBreaks($spd76c7f); $this->AltBody = static::normalizeBreaks($this->html2text($spd76c7f, $sp7c0188)); if (!$this->alternativeExists()) { $this->AltBody = 'This is an HTML-only message. To view it, activate HTML in your email application.' . static::$LE; } return $this->Body; } public function html2text($spcbd26a, $sp7c0188 = false) { if (is_callable($sp7c0188)) { return call_user_func($sp7c0188, $spcbd26a); } return html_entity_decode(trim(strip_tags(preg_replace('/<(head|title|style|script)[^>]*>.*?<\\/\\1>/si', '', $spcbd26a))), ENT_QUOTES, $this->CharSet); } public static function _mime_types($spd92396 = '') { $sp9ef4a6 = array('xl' => 'application/excel', 'js' => 'application/javascript', 'hqx' => 'application/mac-binhex40', 'cpt' => 'application/mac-compactpro', 'bin' => 'application/macbinary', 'doc' => 'application/msword', 'word' => 'application/msword', 'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template', 'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide', 'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'xlam' => 'application/vnd.ms-excel.addin.macroEnabled.12', 'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroEnabled.12', 'class' => 'application/octet-stream', 'dll' => 'application/octet-stream', 'dms' => 'application/octet-stream', 'exe' => 'application/octet-stream', 'lha' => 'application/octet-stream', 'lzh' => 'application/octet-stream', 'psd' => 'application/octet-stream', 'sea' => 'application/octet-stream', 'so' => 'application/octet-stream', 'oda' => 'application/oda', 'pdf' => 'application/pdf', 'ai' => 'application/postscript', 'eps' => 'application/postscript', 'ps' => 'application/postscript', 'smi' => 'application/smil', 'smil' => 'application/smil', 'mif' => 'application/vnd.mif', 'xls' => 'application/vnd.ms-excel', 'ppt' => 'application/vnd.ms-powerpoint', 'wbxml' => 'application/vnd.wap.wbxml', 'wmlc' => 'application/vnd.wap.wmlc', 'dcr' => 'application/x-director', 'dir' => 'application/x-director', 'dxr' => 'application/x-director', 'dvi' => 'application/x-dvi', 'gtar' => 'application/x-gtar', 'php3' => 'application/x-httpd-php', 'php4' => 'application/x-httpd-php', 'php' => 'application/x-httpd-php', 'phtml' => 'application/x-httpd-php', 'phps' => 'application/x-httpd-php-source', 'swf' => 'application/x-shockwave-flash', 'sit' => 'application/x-stuffit', 'tar' => 'application/x-tar', 'tgz' => 'application/x-tar', 'xht' => 'application/xhtml+xml', 'xhtml' => 'application/xhtml+xml', 'zip' => 'application/zip', 'mid' => 'audio/midi', 'midi' => 'audio/midi', 'mp2' => 'audio/mpeg', 'mp3' => 'audio/mpeg', 'mpga' => 'audio/mpeg', 'aif' => 'audio/x-aiff', 'aifc' => 'audio/x-aiff', 'aiff' => 'audio/x-aiff', 'ram' => 'audio/x-pn-realaudio', 'rm' => 'audio/x-pn-realaudio', 'rpm' => 'audio/x-pn-realaudio-plugin', 'ra' => 'audio/x-realaudio', 'wav' => 'audio/x-wav', 'bmp' => 'image/bmp', 'gif' => 'image/gif', 'jpeg' => 'image/jpeg', 'jpe' => 'image/jpeg', 'jpg' => 'image/jpeg', 'png' => 'image/png', 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'eml' => 'message/rfc822', 'css' => 'text/css', 'html' => 'text/html', 'htm' => 'text/html', 'shtml' => 'text/html', 'log' => 'text/plain', 'text' => 'text/plain', 'txt' => 'text/plain', 'rtx' => 'text/richtext', 'rtf' => 'text/rtf', 'vcf' => 'text/vcard', 'vcard' => 'text/vcard', 'ics' => 'text/calendar', 'xml' => 'text/xml', 'xsl' => 'text/xml', 'mpeg' => 'video/mpeg', 'mpe' => 'video/mpeg', 'mpg' => 'video/mpeg', 'mov' => 'video/quicktime', 'qt' => 'video/quicktime', 'rv' => 'video/vnd.rn-realvideo', 'avi' => 'video/x-msvideo', 'movie' => 'video/x-sgi-movie'); $spd92396 = strtolower($spd92396); if (array_key_exists($spd92396, $sp9ef4a6)) { return $sp9ef4a6[$spd92396]; } return 'application/octet-stream'; } public static function filenameToType($spc7fe48) { $sp06b501 = strpos($spc7fe48, '?'); if (false !== $sp06b501) { $spc7fe48 = substr($spc7fe48, 0, $sp06b501); } $spd92396 = static::mb_pathinfo($spc7fe48, PATHINFO_EXTENSION); return static::_mime_types($spd92396); } public static function mb_pathinfo($sp92b2da, $spb86d46 = null) { $spa9ebec = array('dirname' => '', 'basename' => '', 'extension' => '', 'filename' => ''); $sp08f8ea = array(); if (preg_match('#^(.*?)[\\\\/]*(([^/\\\\]*?)(\\.([^\\.\\\\/]+?)|))[\\\\/\\.]*$#im', $sp92b2da, $sp08f8ea)) { if (array_key_exists(1, $sp08f8ea)) { $spa9ebec['dirname'] = $sp08f8ea[1]; } if (array_key_exists(2, $sp08f8ea)) { $spa9ebec['basename'] = $sp08f8ea[2]; } if (array_key_exists(5, $sp08f8ea)) { $spa9ebec['extension'] = $sp08f8ea[5]; } if (array_key_exists(3, $sp08f8ea)) { $spa9ebec['filename'] = $sp08f8ea[3]; } } switch ($spb86d46) { case PATHINFO_DIRNAME: case 'dirname': return $spa9ebec['dirname']; case PATHINFO_BASENAME: case 'basename': return $spa9ebec['basename']; case PATHINFO_EXTENSION: case 'extension': return $spa9ebec['extension']; case PATHINFO_FILENAME: case 'filename': return $spa9ebec['filename']; default: return $spa9ebec; } } public function set($spbc60b1, $spc1f8c3 = '') { if (property_exists($this, $spbc60b1)) { $this->{$spbc60b1} = $spc1f8c3; return true; } $this->setError($this->lang('variable_set') . $spbc60b1); return false; } public function secureHeader($sp059473) { return trim(str_replace(array('', '
'), '', $sp059473)); } public static function normalizeBreaks($sp2d0e1a, $sp98af6a = null) { if (null === $sp98af6a) { $sp98af6a = static::$LE; } $sp2d0e1a = str_replace(array('
', ''), '
', $sp2d0e1a); if ('
' !== $sp98af6a) { $sp2d0e1a = str_replace('
', $sp98af6a, $sp2d0e1a); } return $sp2d0e1a; } public static function getLE() { return static::$LE; } protected static function setLE($speaed02) { static::$LE = $speaed02; } public function sign($sp20ffef, $sp612cfa, $sp230eee, $spc5149c = '') { $this->sign_cert_file = $sp20ffef; $this->sign_key_file = $sp612cfa; $this->sign_key_pass = $sp230eee; $this->sign_extracerts_file = $spc5149c; } public function DKIM_QP($spf56de6) { $spbd2d84 = ''; $sp001c36 = strlen($spf56de6); for ($sp6a95ff = 0; $sp6a95ff < $sp001c36; ++$sp6a95ff) { $sp51a749 = ord($spf56de6[$sp6a95ff]); if (33 <= $sp51a749 and $sp51a749 <= 58 or $sp51a749 == 60 or 62 <= $sp51a749 and $sp51a749 <= 126) { $spbd2d84 .= $spf56de6[$sp6a95ff]; } else { $spbd2d84 .= '=' . sprintf('%02X', $sp51a749); } } return $spbd2d84; } public function DKIM_Sign($sp36ec74) { if (!defined('PKCS7_TEXT')) { if ($this->exceptions) { throw new Exception($this->lang('extension_missing') . 'openssl'); } return ''; } $sp0a4489 = !empty($this->DKIM_private_string) ? $this->DKIM_private_string : file_get_contents($this->DKIM_private); if ('' != $this->DKIM_passphrase) { $spcbd3b6 = openssl_pkey_get_private($sp0a4489, $this->DKIM_passphrase); } else { $spcbd3b6 = openssl_pkey_get_private($sp0a4489); } if (openssl_sign($sp36ec74, $sp60fd3a, $spcbd3b6, 'sha256WithRSAEncryption')) { openssl_pkey_free($spcbd3b6); return base64_encode($sp60fd3a); } openssl_pkey_free($spcbd3b6); return ''; } public function DKIM_HeaderC($sp36ec74) { $sp36ec74 = preg_replace('/\\r\\n[ \\t]+/', ' ', $sp36ec74); $sp53352b = explode('
', $sp36ec74); foreach ($sp53352b as $spa6cb11 => $spbd2d84) { if (strpos($spbd2d84, ':') === false) { continue; } list($sp45cb54, $spc1f8c3) = explode(':', $spbd2d84, 2); $sp45cb54 = strtolower($sp45cb54); $spc1f8c3 = preg_replace('/[ \\t]{2,}/', ' ', $spc1f8c3); $sp53352b[$spa6cb11] = trim($sp45cb54, ' 	') . ':' . trim($spc1f8c3, ' 	'); } return implode('
', $sp53352b); } public function DKIM_BodyC($spd8923c) { if (empty($spd8923c)) { return '
'; } $spd8923c = static::normalizeBreaks($spd8923c, '
'); return rtrim($spd8923c, '
') . '
'; } public function DKIM_Add($sp4a7ae6, $spde1bf7, $spd8923c) { $sp8410e8 = 'rsa-sha256'; $spc6a42d = 'relaxed/simple'; $spcbf8b8 = 'dns/txt'; $spabfbf9 = time(); $spc3e65f = "Subject: {$spde1bf7}"; $spc4d26f = explode(static::$LE, $sp4a7ae6); $sp651a5c = ''; $sp0a8471 = ''; $sp4bb0a6 = ''; $sp1745f8 = ''; foreach ($spc4d26f as $sp1f44c9) { if (strpos($sp1f44c9, 'From:') === 0) { $sp651a5c = $sp1f44c9; $sp1745f8 = 'from_header'; } elseif (strpos($sp1f44c9, 'To:') === 0) { $sp0a8471 = $sp1f44c9; $sp1745f8 = 'to_header'; } elseif (strpos($sp1f44c9, 'Date:') === 0) { $sp4bb0a6 = $sp1f44c9; $sp1745f8 = 'date_header'; } else { if (!empty(${$sp1745f8}) and strpos($sp1f44c9, ' =?') === 0) { ${$sp1745f8} .= $sp1f44c9; } else { $sp1745f8 = ''; } } } $spba3aa7 = str_replace('|', '=7C', $this->DKIM_QP($sp651a5c)); $spf5fcdd = str_replace('|', '=7C', $this->DKIM_QP($sp0a8471)); $sp02aa15 = str_replace('|', '=7C', $this->DKIM_QP($sp4bb0a6)); $spde1bf7 = str_replace('|', '=7C', $this->DKIM_QP($spc3e65f)); $spd8923c = $this->DKIM_BodyC($spd8923c); $spd72012 = strlen($spd8923c); $sp94ec49 = base64_encode(pack('H*', hash('sha256', $spd8923c))); if ('' == $this->DKIM_identity) { $sp8fa26a = ''; } else { $sp8fa26a = ' i=' . $this->DKIM_identity . ';'; } $sp165957 = 'DKIM-Signature: v=1; a=' . $sp8410e8 . '; q=' . $spcbf8b8 . '; l=' . $spd72012 . '; s=' . $this->DKIM_selector . ';
' . '	t=' . $spabfbf9 . '; c=' . $spc6a42d . ';
' . '	h=From:To:Date:Subject;
' . '	d=' . $this->DKIM_domain . ';' . $sp8fa26a . '
' . "\tz={$spba3aa7}\r\n" . "\t|{$spf5fcdd}\r\n" . "\t|{$sp02aa15}\r\n" . "\t|{$spde1bf7};\r\n" . '	bh=' . $sp94ec49 . ';
' . '	b='; $sp1034a6 = $this->DKIM_HeaderC($sp651a5c . '
' . $sp0a8471 . '
' . $sp4bb0a6 . '
' . $spc3e65f . '
' . $sp165957); $spc518fd = $this->DKIM_Sign($sp1034a6); return static::normalizeBreaks($sp165957 . $spc518fd) . static::$LE; } public static function hasLineLongerThanMax($sp059473) { return (bool) preg_match('/^(.{' . (self::MAX_LINE_LENGTH + strlen(static::$LE)) . ',})/m', $sp059473); } public function getToAddresses() { return $this->to; } public function getCcAddresses() { return $this->cc; } public function getBccAddresses() { return $this->bcc; } public function getReplyToAddresses() { return $this->ReplyTo; } public function getAllRecipientAddresses() { return $this->all_recipients; } protected function doCallback($sp2ff474, $spf5fcdd, $spebf2d1, $sp642a57, $spde1bf7, $spd8923c, $spba3aa7, $sp151cb6) { if (!empty($this->action_function) and is_callable($this->action_function)) { call_user_func($this->action_function, $sp2ff474, $spf5fcdd, $spebf2d1, $sp642a57, $spde1bf7, $spd8923c, $spba3aa7, $sp151cb6); } } public function getOAuth() { return $this->oauth; } public function setOAuth(OAuth $sp758462) { $this->oauth = $sp758462; } }