<?php
namespace flight\core; class Dispatcher { protected $events = array(); protected $filters = array(); public function run($spbc60b1, array $spfbee46 = array()) { $spb46e21 = ''; if (!empty($this->filters[$spbc60b1]['before'])) { $this->filter($this->filters[$spbc60b1]['before'], $spfbee46, $spb46e21); } $spb46e21 = $this->execute($this->get($spbc60b1), $spfbee46); if (!empty($this->filters[$spbc60b1]['after'])) { $this->filter($this->filters[$spbc60b1]['after'], $spfbee46, $spb46e21); } return $spb46e21; } public function set($spbc60b1, $spfed79e) { $this->events[$spbc60b1] = $spfed79e; } public function get($spbc60b1) { return isset($this->events[$spbc60b1]) ? $this->events[$spbc60b1] : null; } public function has($spbc60b1) { return isset($this->events[$spbc60b1]); } public function clear($spbc60b1 = null) { if ($spbc60b1 !== null) { unset($this->events[$spbc60b1]); unset($this->filters[$spbc60b1]); } else { $this->events = array(); $this->filters = array(); } } public function hook($spbc60b1, $spb40563, $spfed79e) { $this->filters[$spbc60b1][$spb40563][] = $spfed79e; } public function filter($sp72ba23, &$spfbee46, &$spb46e21) { $spc3b0e0 = array(&$spfbee46, &$spb46e21); foreach ($sp72ba23 as $spfed79e) { $spa3a361 = $this->execute($spfed79e, $spc3b0e0); if ($spa3a361 === false) { break; } } } public static function execute($spfed79e, array &$spfbee46 = array()) { if (is_callable($spfed79e)) { return is_array($spfed79e) ? self::invokeMethod($spfed79e, $spfbee46) : self::callFunction($spfed79e, $spfbee46); } else { throw new \Exception('Invalid callback specified.'); } } public static function callFunction($sp0e7479, array &$spfbee46 = array()) { if (is_string($sp0e7479) && strpos($sp0e7479, '::') !== false) { return call_user_func_array($sp0e7479, $spfbee46); } switch (count($spfbee46)) { case 0: return $sp0e7479(); case 1: return $sp0e7479($spfbee46[0]); case 2: return $sp0e7479($spfbee46[0], $spfbee46[1]); case 3: return $sp0e7479($spfbee46[0], $spfbee46[1], $spfbee46[2]); case 4: return $sp0e7479($spfbee46[0], $spfbee46[1], $spfbee46[2], $spfbee46[3]); case 5: return $sp0e7479($spfbee46[0], $spfbee46[1], $spfbee46[2], $spfbee46[3], $spfbee46[4]); default: return call_user_func_array($sp0e7479, $spfbee46); } } public static function invokeMethod($sp0e7479, array &$spfbee46 = array()) { list($spda326a, $sp70c3ee) = $sp0e7479; $sp172421 = is_object($spda326a); switch (count($spfbee46)) { case 0: return $sp172421 ? $spda326a->{$sp70c3ee}() : $spda326a::$sp70c3ee(); case 1: return $sp172421 ? $spda326a->{$sp70c3ee}($spfbee46[0]) : $spda326a::$sp70c3ee($spfbee46[0]); case 2: return $sp172421 ? $spda326a->{$sp70c3ee}($spfbee46[0], $spfbee46[1]) : $spda326a::$sp70c3ee($spfbee46[0], $spfbee46[1]); case 3: return $sp172421 ? $spda326a->{$sp70c3ee}($spfbee46[0], $spfbee46[1], $spfbee46[2]) : $spda326a::$sp70c3ee($spfbee46[0], $spfbee46[1], $spfbee46[2]); case 4: return $sp172421 ? $spda326a->{$sp70c3ee}($spfbee46[0], $spfbee46[1], $spfbee46[2], $spfbee46[3]) : $spda326a::$sp70c3ee($spfbee46[0], $spfbee46[1], $spfbee46[2], $spfbee46[3]); case 5: return $sp172421 ? $spda326a->{$sp70c3ee}($spfbee46[0], $spfbee46[1], $spfbee46[2], $spfbee46[3], $spfbee46[4]) : $spda326a::$sp70c3ee($spfbee46[0], $spfbee46[1], $spfbee46[2], $spfbee46[3], $spfbee46[4]); default: return call_user_func_array($sp0e7479, $spfbee46); } } public function reset() { $this->events = array(); $this->filters = array(); } }