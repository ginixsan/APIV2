<?php
namespace flight\net; class Route { public $pattern; public $callback; public $methods = array(); public $params = array(); public $regex; public $splat = ''; public $pass = false; public function __construct($sp07e4f9, $spfed79e, $sp1ca8e6, $spa32e01) { $this->pattern = $sp07e4f9; $this->callback = $spfed79e; $this->methods = $sp1ca8e6; $this->pass = $spa32e01; } public function matchUrl($sp00ca70, $spf88678 = false) { if ($this->pattern === '*' || $this->pattern === $sp00ca70) { return true; } $sp4aeec8 = array(); $sp105b52 = substr($this->pattern, -1); if ($sp105b52 === '*') { $sp204242 = 0; $sp001c36 = strlen($sp00ca70); $spee7780 = substr_count($this->pattern, '/'); for ($sp6a95ff = 0; $sp6a95ff < $sp001c36; $sp6a95ff++) { if ($sp00ca70[$sp6a95ff] == '/') { $sp204242++; } if ($sp204242 == $spee7780) { break; } } $this->splat = (string) substr($sp00ca70, $sp6a95ff + 1); } $spf0c05f = str_replace(array(')', '/*'), array(')?', '(/?|/.*?)'), $this->pattern); $spf0c05f = preg_replace_callback('#@([\\w]+)(:([^/\\(\\)]*))?#', function ($spe080bd) use(&$sp4aeec8) { $sp4aeec8[$spe080bd[1]] = null; if (isset($spe080bd[3])) { return '(?P<' . $spe080bd[1] . '>' . $spe080bd[3] . ')'; } return '(?P<' . $spe080bd[1] . '>[^/\\?]+)'; }, $spf0c05f); if ($sp105b52 === '/') { $spf0c05f .= '?'; } else { $spf0c05f .= '/?'; } if (preg_match('#^' . $spf0c05f . '(?:\\?.*)?$#' . ($spf88678 ? '' : 'i'), $sp00ca70, $spe080bd)) { foreach ($sp4aeec8 as $sp027ae6 => $sp42824e) { $this->params[$sp027ae6] = array_key_exists($sp027ae6, $spe080bd) ? urldecode($spe080bd[$sp027ae6]) : null; } $this->regex = $spf0c05f; return true; } return false; } public function matchMethod($sp70c3ee) { return count(array_intersect(array($sp70c3ee, '*'), $this->methods)) > 0; } }