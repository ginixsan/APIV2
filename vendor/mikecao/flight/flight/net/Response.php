<?php
namespace flight\net; class Response { protected $status = 200; protected $headers = array(); protected $body; protected $sent = false; public static $codes = array(100 => 'Continue', 101 => 'Switching Protocols', 102 => 'Processing', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 207 => 'Multi-Status', 208 => 'Already Reported', 226 => 'IM Used', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Found', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 306 => '(Unused)', 307 => 'Temporary Redirect', 308 => 'Permanent Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Payload Too Large', 414 => 'URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Range Not Satisfiable', 417 => 'Expectation Failed', 422 => 'Unprocessable Entity', 423 => 'Locked', 424 => 'Failed Dependency', 426 => 'Upgrade Required', 428 => 'Precondition Required', 429 => 'Too Many Requests', 431 => 'Request Header Fields Too Large', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported', 506 => 'Variant Also Negotiates', 507 => 'Insufficient Storage', 508 => 'Loop Detected', 510 => 'Not Extended', 511 => 'Network Authentication Required'); public function status($spa9cf2c = null) { if ($spa9cf2c === null) { return $this->status; } if (array_key_exists($spa9cf2c, self::$codes)) { $this->status = $spa9cf2c; } else { throw new \Exception('Invalid status code.'); } return $this; } public function header($spbc60b1, $spc1f8c3 = null) { if (is_array($spbc60b1)) { foreach ($spbc60b1 as $sp027ae6 => $sp42824e) { $this->headers[$sp027ae6] = $sp42824e; } } else { $this->headers[$spbc60b1] = $spc1f8c3; } return $this; } public function headers() { return $this->headers; } public function write($sp059473) { $this->body .= $sp059473; return $this; } public function clear() { $this->status = 200; $this->headers = array(); $this->body = ''; return $this; } public function cache($sp829693) { if ($sp829693 === false) { $this->headers['Expires'] = 'Mon, 26 Jul 1997 05:00:00 GMT'; $this->headers['Cache-Control'] = array('no-store, no-cache, must-revalidate', 'post-check=0, pre-check=0', 'max-age=0'); $this->headers['Pragma'] = 'no-cache'; } else { $sp829693 = is_int($sp829693) ? $sp829693 : strtotime($sp829693); $this->headers['Expires'] = gmdate('D, d M Y H:i:s', $sp829693) . ' GMT'; $this->headers['Cache-Control'] = 'max-age=' . ($sp829693 - time()); if (isset($this->headers['Pragma']) && $this->headers['Pragma'] == 'no-cache') { unset($this->headers['Pragma']); } } return $this; } public function sendHeaders() { if (strpos(php_sapi_name(), 'cgi') !== false) { header(sprintf('Status: %d %s', $this->status, self::$codes[$this->status]), true); } else { header(sprintf('%s %d %s', isset($_SERVER['SERVER_PROTOCOL']) ? $_SERVER['SERVER_PROTOCOL'] : 'HTTP/1.1', $this->status, self::$codes[$this->status]), true, $this->status); } foreach ($this->headers as $spdf7dd8 => $spc1f8c3) { if (is_array($spc1f8c3)) { foreach ($spc1f8c3 as $sp42824e) { header($spdf7dd8 . ': ' . $sp42824e, false); } } else { header($spdf7dd8 . ': ' . $spc1f8c3); } } $spfbb891 = $this->getContentLength(); if ($spfbb891 > 0) { header('Content-Length: ' . $spfbb891); } return $this; } public function getContentLength() { return extension_loaded('mbstring') ? mb_strlen($this->body, 'latin1') : strlen($this->body); } public function sent() { return $this->sent; } public function send() { if (ob_get_length() > 0) { ob_end_clean(); } if (!headers_sent()) { $this->sendHeaders(); } echo $this->body; $this->sent = true; } }