<?php
namespace flight\net; use flight\util\Collection; class Request { public $url; public $base; public $method; public $referrer; public $ip; public $ajax; public $scheme; public $user_agent; public $type; public $length; public $query; public $data; public $cookies; public $files; public $secure; public $accept; public $proxy_ip; public function __construct($sp0c9110 = array()) { if (empty($sp0c9110)) { $sp0c9110 = array('url' => str_replace('@', '%40', self::getVar('REQUEST_URI', '/')), 'base' => str_replace(array('\\', ' '), array('/', '%20'), dirname(self::getVar('SCRIPT_NAME'))), 'method' => self::getMethod(), 'referrer' => self::getVar('HTTP_REFERER'), 'ip' => self::getVar('REMOTE_ADDR'), 'ajax' => self::getVar('HTTP_X_REQUESTED_WITH') == 'XMLHttpRequest', 'scheme' => self::getVar('SERVER_PROTOCOL', 'HTTP/1.1'), 'user_agent' => self::getVar('HTTP_USER_AGENT'), 'type' => self::getVar('CONTENT_TYPE'), 'length' => self::getVar('CONTENT_LENGTH', 0), 'query' => new Collection($_GET), 'data' => new Collection($_POST), 'cookies' => new Collection($_COOKIE), 'files' => new Collection($_FILES), 'secure' => self::getVar('HTTPS', 'off') != 'off', 'accept' => self::getVar('HTTP_ACCEPT'), 'proxy_ip' => self::getProxyIpAddress()); } $this->init($sp0c9110); } public function init($sp159326 = array()) { foreach ($sp159326 as $spbc60b1 => $spc1f8c3) { $this->{$spbc60b1} = $spc1f8c3; } if ($this->base != '/' && strlen($this->base) > 0 && strpos($this->url, $this->base) === 0) { $this->url = substr($this->url, strlen($this->base)); } if (empty($this->url)) { $this->url = '/'; } else { $_GET += self::parseQuery($this->url); $this->query->setData($_GET); } if (strpos($this->type, 'application/json') === 0) { $spd8923c = $this->getBody(); if ($spd8923c != '') { $sp0a1a6a = json_decode($spd8923c, true); if ($sp0a1a6a != null) { $this->data->setData($sp0a1a6a); } } } } public static function getBody() { static $spd8923c; if (!is_null($spd8923c)) { return $spd8923c; } $sp70c3ee = self::getMethod(); if ($sp70c3ee == 'POST' || $sp70c3ee == 'PUT' || $sp70c3ee == 'PATCH') { $spd8923c = file_get_contents('php://input'); } return $spd8923c; } public static function getMethod() { $sp70c3ee = self::getVar('REQUEST_METHOD', 'GET'); if (isset($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE'])) { $sp70c3ee = $_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE']; } elseif (isset($_REQUEST['_method'])) { $sp70c3ee = $_REQUEST['_method']; } return strtoupper($sp70c3ee); } public static function getProxyIpAddress() { static $sp7d689a = array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED'); $spd94687 = \FILTER_FLAG_NO_PRIV_RANGE | \FILTER_FLAG_NO_RES_RANGE; foreach ($sp7d689a as $spa6cb11) { if (array_key_exists($spa6cb11, $_SERVER)) { sscanf($_SERVER[$spa6cb11], '%[^,]', $sp9003fa); if (filter_var($sp9003fa, \FILTER_VALIDATE_IP, $spd94687) !== false) { return $sp9003fa; } } } return ''; } public static function getVar($sp87f84e, $sp6f59f2 = '') { return isset($_SERVER[$sp87f84e]) ? $_SERVER[$sp87f84e] : $sp6f59f2; } public static function parseQuery($sp00ca70) { $spfbee46 = array(); $spc3b0e0 = parse_url($sp00ca70); if (isset($spc3b0e0['query'])) { parse_str($spc3b0e0['query'], $spfbee46); } return $spfbee46; } }