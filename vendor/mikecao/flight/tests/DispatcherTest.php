<?php
require_once 'vendor/autoload.php'; require_once __DIR__ . '/classes/Hello.php'; class DispatcherTest extends PHPUnit_Framework_TestCase { private $dispatcher; function setUp() { $this->dispatcher = new \flight\core\Dispatcher(); } function testClosureMapping() { $this->dispatcher->set('map1', function () { return 'hello'; }); $sp38622e = $this->dispatcher->run('map1'); $this->assertEquals('hello', $sp38622e); } function testFunctionMapping() { $this->dispatcher->set('map2', function () { return 'hello'; }); $sp38622e = $this->dispatcher->run('map2'); $this->assertEquals('hello', $sp38622e); } function testClassMethodMapping() { $sp9240ab = new Hello(); $this->dispatcher->set('map3', array($sp9240ab, 'sayHi')); $sp38622e = $this->dispatcher->run('map3'); $this->assertEquals('hello', $sp38622e); } function testStaticClassMethodMapping() { $this->dispatcher->set('map4', array('Hello', 'sayBye')); $sp38622e = $this->dispatcher->run('map4'); $this->assertEquals('goodbye', $sp38622e); } function testBeforeAndAfter() { $this->dispatcher->set('hello', function ($spbc60b1) { return "Hello, {$spbc60b1}!"; }); $this->dispatcher->hook('hello', 'before', function (&$spfbee46, &$spb46e21) { $spfbee46[0] = 'Fred'; }); $this->dispatcher->hook('hello', 'after', function (&$spfbee46, &$spb46e21) { $spb46e21 .= ' Have a nice day!'; }); $sp38622e = $this->dispatcher->run('hello', array('Bob')); $this->assertEquals('Hello, Fred! Have a nice day!', $sp38622e); } function testInvalidCallback() { $this->setExpectedException('Exception', 'Invalid callback specified.'); $this->dispatcher->execute(array('NonExistentClass', 'nonExistentMethod')); } }