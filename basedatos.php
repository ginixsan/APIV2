<?php
class DB1 { public static $dbName = '';
 public static $user = '';
 public static $password = '';
 public static $host = '127.0.0.1';
 public static $port = 8889;
 public static $encoding = 'latin1';
 public static $param_char = '%';
 public static $named_param_seperator = '_';
 public static $success_handler = false;
 public static $error_handler = true;
 public static $throw_exception_on_error = false;
 public static $nonsql_error_handler = null;
 public static $throw_exception_on_nonsql_error = false;
 public static $nested_transactions = false;
 public static $usenull = true;
 public static $ssl = array('key' => '', 'cert' => '', 'ca_cert' => '', 'ca_path' => '', 'cipher' => '');
 public static $connect_options = array(MYSQLI_OPT_CONNECT_TIMEOUT => 30);
 protected static $mdb = null;
 public static function getMDB() { $spbdd03d = DB1::$mdb;
 if ($spbdd03d === null) { $spbdd03d = DB1::$mdb = new MeekroDB();
 } static $spc5d869 = array('param_char', 'named_param_seperator', 'success_handler', 'error_handler', 'throw_exception_on_error', 'nonsql_error_handler', 'throw_exception_on_nonsql_error', 'nested_transactions', 'usenull', 'ssl', 'connect_options');
 $sp05ac2f = get_class_vars('DB1');
 foreach ($spc5d869 as $spf88540) { if ($spbdd03d->{$spf88540} !== $sp05ac2f[$spf88540]) { $spbdd03d->{$spf88540} = $sp05ac2f[$spf88540];
 } } return $spbdd03d;
 } public static function get() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'get'), $spc3b0e0);
 } public static function disconnect() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB::getMDB(), 'disconnect'), $spc3b0e0);
 } public static function query() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'query'), $spc3b0e0);
 } public static function queryFirstRow() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'queryFirstRow'), $spc3b0e0);
 } public static function queryOneRow() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'queryOneRow'), $spc3b0e0);
 } public static function queryAllLists() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'queryAllLists'), $spc3b0e0);
 } public static function queryFullColumns() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'queryFullColumns'), $spc3b0e0);
 } public static function queryFirstList() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'queryFirstList'), $spc3b0e0);
 } public static function queryOneList() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'queryOneList'), $spc3b0e0);
 } public static function queryFirstColumn() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'queryFirstColumn'), $spc3b0e0);
 } public static function queryOneColumn() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'queryOneColumn'), $spc3b0e0);
 } public static function queryFirstField() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'queryFirstField'), $spc3b0e0);
 } public static function queryOneField() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'queryOneField'), $spc3b0e0);
 } public static function queryRaw() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'queryRaw'), $spc3b0e0);
 } public static function queryRawUnbuf() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'queryRawUnbuf'), $spc3b0e0);
 } public static function insert() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'insert'), $spc3b0e0);
 } public static function insertIgnore() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'insertIgnore'), $spc3b0e0);
 } public static function insertUpdate() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'insertUpdate'), $spc3b0e0);
 } public static function replace() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'replace'), $spc3b0e0);
 } public static function update() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'update'), $spc3b0e0);
 } public static function delete() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'delete'), $spc3b0e0);
 } public static function insertId() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'insertId'), $spc3b0e0);
 } public static function count() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'count'), $spc3b0e0);
 } public static function affectedRows() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'affectedRows'), $spc3b0e0);
 } public static function useDB() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'useDB'), $spc3b0e0);
 } public static function startTransaction() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB::getMDB(), 'startTransaction'), $spc3b0e0);
 } public static function commit() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'commit'), $spc3b0e0);
 } public static function rollback() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'rollback'), $spc3b0e0);
 } public static function tableList() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'tableList'), $spc3b0e0);
 } public static function columnList() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'columnList'), $spc3b0e0);
 } public static function sqlEval() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'sqlEval'), $spc3b0e0);
 } public static function nonSQLError() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'nonSQLError'), $spc3b0e0);
 } public static function serverVersion() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'serverVersion'), $spc3b0e0);
 } public static function transactionDepth() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array(DB1::getMDB(), 'transactionDepth'), $spc3b0e0);
 } public static function debugMode($sp837049 = true) { DB1::$success_handler = $sp837049;
 } } class MeekroDB { public $dbName = '';
 public $user = '';
 public $password = '';
 public $host = '127.0.0.1';
 public $port = 8889;
 public $encoding = 'latin1';
 public $param_char = '%';
 public $named_param_seperator = '_';
 public $success_handler = false;
 public $error_handler = true;
 public $throw_exception_on_error = false;
 public $nonsql_error_handler = null;
 public $throw_exception_on_nonsql_error = false;
 public $nested_transactions = false;
 public $usenull = true;
 public $ssl = array('key' => '', 'cert' => '', 'ca_cert' => '', 'ca_path' => '', 'cipher' => '');
 public $connect_options = array(MYSQLI_OPT_CONNECT_TIMEOUT => 30);
 public $internal_mysql = null;
 public $server_info = null;
 public $insert_id = 0;
 public $num_rows = 0;
 public $affected_rows = 0;
 public $current_db = null;
 public $nested_transactions_count = 0;
 public function __construct($sp6f06d3 = null, $sp4de544 = null, $spb36729 = null, $sp03a3ee = null, $spc61fb5 = null, $spceb56b = null) { if ($sp6f06d3 === null) { $sp6f06d3 = DB1::$host;
 } if ($sp4de544 === null) { $sp4de544 = DB1::$user;
 } if ($spb36729 === null) { $spb36729 = DB1::$password;
 } if ($sp03a3ee === null) { $sp03a3ee = DB1::$dbName;
 } if ($spc61fb5 === null) { $spc61fb5 = DB1::$port;
 } if ($spceb56b === null) { $spceb56b = DB1::$encoding;
 } $this->host = $sp6f06d3;
 $this->user = $sp4de544;
 $this->password = $spb36729;
 $this->dbName = $sp03a3ee;
 $this->port = $spc61fb5;
 $this->encoding = $spceb56b;
 } public function get() { $sp74e5b5 = $this->internal_mysql;
 if (!$sp74e5b5 instanceof MySQLi) { if (!$this->port) { $this->port = ini_get('mysqli.default_port');
 } $this->current_db = $this->dbName;
 $sp74e5b5 = new mysqli();
 $sp6198b1 = 0;
 if ($this->ssl['key']) { $sp74e5b5->ssl_set($this->ssl['key'], $this->ssl['cert'], $this->ssl['ca_cert'], $this->ssl['ca_path'], $this->ssl['cipher']);
 $sp6198b1 |= MYSQLI_CLIENT_SSL;
 } foreach ($this->connect_options as $spa6cb11 => $spc1f8c3) { $sp74e5b5->options($spa6cb11, $spc1f8c3);
 } @$sp74e5b5->real_connect($this->host, $this->user, $this->password, $this->dbName, $this->port, null, $sp6198b1);
 if ($sp74e5b5->connect_error) { $this->nonSQLError('Unable to connect to MySQL server! Error: ' . $sp74e5b5->connect_error);
 } $sp74e5b5->set_charset($this->encoding);
 $this->internal_mysql = $sp74e5b5;
 $this->server_info = $sp74e5b5->server_info;
 } return $sp74e5b5;
 } public function disconnect() { $spda21e7 = $this->internal_mysql;
 if ($spda21e7 instanceof MySQLi) { if ($sp86a08a = $spda21e7->thread_id) { $spda21e7->kill($sp86a08a);
 } $spda21e7->close();
 } $this->internal_mysql = null;
 } public function nonSQLError($spd76c7f) { if ($this->throw_exception_on_nonsql_error) { $sp8f120e = new MeekroDBException($spd76c7f);
 throw $sp8f120e;
 } $spc0e7a7 = is_callable($this->nonsql_error_handler) ? $this->nonsql_error_handler : 'meekrodb_error_handler';
 call_user_func($spc0e7a7, array('type' => 'nonsql', 'error' => $spd76c7f));
 } public function debugMode($sp837049 = true) { $this->success_handler = $sp837049;
 } public function serverVersion() { $this->get();
 return $this->server_info;
 } public function transactionDepth() { return $this->nested_transactions_count;
 } public function insertId() { return $this->insert_id;
 } public function affectedRows() { return $this->affected_rows;
 } public function count() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array($this, 'numRows'), $spc3b0e0);
 } public function numRows() { return $this->num_rows;
 } public function useDB() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array($this, 'setDB'), $spc3b0e0);
 } public function setDB($sp03a3ee) { $sp2c6a71 = $this->get();
 if (!$sp2c6a71->select_db($sp03a3ee)) { $this->nonSQLError("Unable to set database to {$sp03a3ee}");
 } $this->current_db = $sp03a3ee;
 } public function startTransaction() { if ($this->nested_transactions && $this->serverVersion() < '5.5') { return $this->nonSQLError('Nested transactions are only available on MySQL 5.5 and greater. You are using MySQL ' . $this->serverVersion());
 } if (!$this->nested_transactions || $this->nested_transactions_count == 0) { $this->query('START TRANSACTION');
 $this->nested_transactions_count = 1;
 } else { $this->query("SAVEPOINT LEVEL{$this->nested_transactions_count}");
 $this->nested_transactions_count++;
 } return $this->nested_transactions_count;
 } public function commit($sp71b391 = false) { if ($this->nested_transactions && $this->serverVersion() < '5.5') { return $this->nonSQLError('Nested transactions are only available on MySQL 5.5 and greater. You are using MySQL ' . $this->serverVersion());
 } if ($this->nested_transactions && $this->nested_transactions_count > 0) { $this->nested_transactions_count--;
 } if (!$this->nested_transactions || $sp71b391 || $this->nested_transactions_count == 0) { $this->nested_transactions_count = 0;
 $this->query('COMMIT');
 } else { $this->query("RELEASE SAVEPOINT LEVEL{$this->nested_transactions_count}");
 } return $this->nested_transactions_count;
 } public function rollback($sp71b391 = false) { if ($this->nested_transactions && $this->serverVersion() < '5.5') { return $this->nonSQLError('Nested transactions are only available on MySQL 5.5 and greater. You are using MySQL ' . $this->serverVersion());
 } if ($this->nested_transactions && $this->nested_transactions_count > 0) { $this->nested_transactions_count--;
 } if (!$this->nested_transactions || $sp71b391 || $this->nested_transactions_count == 0) { $this->nested_transactions_count = 0;
 $this->query('ROLLBACK');
 } else { $this->query("ROLLBACK TO SAVEPOINT LEVEL{$this->nested_transactions_count}");
 } return $this->nested_transactions_count;
 } protected function formatTableName($sp18581a) { $sp18581a = trim($sp18581a, '`');
 if (strpos($sp18581a, '.')) { return implode('.', array_map(array($this, 'formatTableName'), explode('.', $sp18581a)));
 } else { return '`' . str_replace('`', '``', $sp18581a) . '`';
 } } public function update() { $spc3b0e0 = func_get_args();
 $sp18581a = array_shift($spc3b0e0);
 $spfbee46 = array_shift($spc3b0e0);
 $sp09d203 = array_shift($spc3b0e0);
 $sp4a5033 = str_replace('%', $this->param_char, 'UPDATE %b SET %? WHERE ') . $sp09d203;
 array_unshift($spc3b0e0, $spfbee46);
 array_unshift($spc3b0e0, $sp18581a);
 array_unshift($spc3b0e0, $sp4a5033);
 return call_user_func_array(array($this, 'query'), $spc3b0e0);
 } public function insertOrReplace($spd4d50c, $sp18581a, $sp2561dc, $spb86d46 = array()) { $sp2561dc = unserialize(serialize($sp2561dc));
 $sp75a40b = $spb5f78b = array();
 if (isset($sp2561dc[0]) && is_array($sp2561dc[0])) { foreach ($sp2561dc as $sp6c1903) { ksort($sp6c1903);
 if (!$sp75a40b) { $sp75a40b = array_keys($sp6c1903);
 } $spb5f78b[] = array_values($sp6c1903);
 } } else { $sp75a40b = array_keys($sp2561dc);
 $spb5f78b = array_values($sp2561dc);
 } if (isset($spb86d46['ignore']) && $spb86d46['ignore']) { $spd4d50c = 'INSERT IGNORE';
 } if (isset($spb86d46['update']) && is_array($spb86d46['update']) && $spb86d46['update'] && strtolower($spd4d50c) == 'insert') { if (array_values($spb86d46['update']) !== $spb86d46['update']) { return $this->query(str_replace('%', $this->param_char, 'INSERT INTO %b %lb VALUES %? ON DUPLICATE KEY UPDATE %?'), $sp18581a, $sp75a40b, $spb5f78b, $spb86d46['update']);
 } else { $spcdf1ec = array_shift($spb86d46['update']);
 $sp11bd41 = array(str_replace('%', $this->param_char, 'INSERT INTO %b %lb VALUES %? ON DUPLICATE KEY UPDATE ') . $spcdf1ec, $sp18581a, $sp75a40b, $spb5f78b);
 $sp11bd41 = array_merge($sp11bd41, $spb86d46['update']);
 return call_user_func_array(array($this, 'query'), $sp11bd41);
 } } return $this->query(str_replace('%', $this->param_char, '%l INTO %b %lb VALUES %?'), $spd4d50c, $sp18581a, $sp75a40b, $spb5f78b);
 } public function insert($sp18581a, $sp0a1a6a) { return $this->insertOrReplace('INSERT', $sp18581a, $sp0a1a6a);
 } public function insertIgnore($sp18581a, $sp0a1a6a) { return $this->insertOrReplace('INSERT', $sp18581a, $sp0a1a6a, array('ignore' => true));
 } public function replace($sp18581a, $sp0a1a6a) { return $this->insertOrReplace('REPLACE', $sp18581a, $sp0a1a6a);
 } public function insertUpdate() { $spc3b0e0 = func_get_args();
 $sp18581a = array_shift($spc3b0e0);
 $sp0a1a6a = array_shift($spc3b0e0);
 if (!isset($spc3b0e0[0])) { if (isset($sp0a1a6a[0]) && is_array($sp0a1a6a[0])) { $this->nonSQLError('Badly formatted insertUpdate() query -- you didn\'t specify the update component!');
 } $spc3b0e0[0] = $sp0a1a6a;
 } if (is_array($spc3b0e0[0])) { $spfe2ea0 = $spc3b0e0[0];
 } else { $spfe2ea0 = $spc3b0e0;
 } return $this->insertOrReplace('INSERT', $sp18581a, $sp0a1a6a, array('update' => $spfe2ea0));
 } public function delete() { $spc3b0e0 = func_get_args();
 $sp18581a = $this->formatTableName(array_shift($spc3b0e0));
 $sp09d203 = array_shift($spc3b0e0);
 $spf123a1 = "DELETE FROM {$sp18581a} WHERE {$sp09d203}";
 array_unshift($spc3b0e0, $spf123a1);
 return call_user_func_array(array($this, 'query'), $spc3b0e0);
 } public function sqleval() { $spc3b0e0 = func_get_args();
 $sp2d0e1a = call_user_func_array(array($this, 'parseQueryParams'), $spc3b0e0);
 return new MeekroDBEval($sp2d0e1a);
 } public function columnList($sp18581a) { return $this->queryOneColumn('Field', 'SHOW COLUMNS FROM %b', $sp18581a);
 } public function tableList($sp2c6a71 = null) { if ($sp2c6a71) { $sp9f14ef = $this->current_db;
 $this->useDB($sp2c6a71);
 } $sp38622e = $this->queryFirstColumn('SHOW TABLES');
 if (isset($sp9f14ef)) { $this->useDB($sp9f14ef);
 } return $sp38622e;
 } protected function preparseQueryParams() { $spc3b0e0 = func_get_args();
 $spe1a85c = trim(strval(array_shift($spc3b0e0)));
 $spc1ac70 = $spc3b0e0;
 if (count($spc1ac70) == 0) { return array($spe1a85c);
 } $sp10a09d = strlen($this->param_char);
 $sp46e16e = strlen($this->named_param_seperator);
 $sp699fd0 = array($this->param_char . 'll', $this->param_char . 'ls', $this->param_char . 'l', $this->param_char . 'li', $this->param_char . 'ld', $this->param_char . 'lb', $this->param_char . 'lt', $this->param_char . 's', $this->param_char . 'i', $this->param_char . 'd', $this->param_char . 'b', $this->param_char . 't', $this->param_char . '?', $this->param_char . 'ss');
 $sp1602d4 = array();
 foreach ($sp699fd0 as $spb40563) { $sp669d49 = 0;
 while (($sp64cbd4 = strpos($spe1a85c, $spb40563, $sp669d49)) !== false) { $sp669d49 = $sp64cbd4 + 1;
 if (isset($sp1602d4[$sp64cbd4]) && strlen($sp1602d4[$sp64cbd4]) > strlen($spb40563)) { continue;
 } $sp1602d4[$sp64cbd4] = $spb40563;
 } } ksort($sp1602d4);
 $sp85154b = array();
 $spc704fd = 0;
 foreach ($sp1602d4 as $sp64cbd4 => $spb40563) { $spb40563 = substr($spb40563, $sp10a09d);
 $spb73564 = strlen($spb40563) + $sp10a09d;
 $sp639d2f = $sp64cbd4 + $spc704fd;
 $sp182121 = $sp639d2f + $spb73564;
 $sp798390 = 0;
 if ($sp798390 = strspn($spe1a85c, '0123456789', $sp182121)) { $sp28db21 = substr($spe1a85c, $sp182121, $sp798390);
 if (!array_key_exists($sp28db21, $spc1ac70)) { $this->nonSQLError("Non existent argument reference (arg {$sp28db21}): {$spe1a85c}");
 } $sp0a5dca = $spc1ac70[$sp28db21];
 } else { if (substr($spe1a85c, $sp182121, $sp46e16e) == $this->named_param_seperator) { $sp798390 = strspn($spe1a85c, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_', $sp182121 + $sp46e16e) + $sp46e16e;
 $sp28db21 = substr($spe1a85c, $sp182121 + $sp46e16e, $sp798390 - $sp46e16e);
 if (count($spc1ac70) != 1 || !is_array($spc1ac70[0])) { $this->nonSQLError('If you use named parameters, the second argument must be an array of parameters');
 } if (!array_key_exists($sp28db21, $spc1ac70[0])) { $this->nonSQLError("Non existent argument reference (arg {$sp28db21}): {$spe1a85c}");
 } $sp0a5dca = $spc1ac70[0][$sp28db21];
 } else { $sp28db21 = 0;
 $sp0a5dca = array_shift($spc3b0e0);
 } } if ($sp639d2f > 0) { $sp85154b[] = substr($spe1a85c, 0, $sp639d2f);
 } if (is_object($sp0a5dca) && $sp0a5dca instanceof WhereClause) { list($sp827ef8, $sp380680) = $sp0a5dca->textAndArgs();
 array_unshift($sp380680, $sp827ef8);
 $spe9ebba = call_user_func_array(array($this, 'preparseQueryParams'), $sp380680);
 $sp85154b = array_merge($sp85154b, $spe9ebba);
 } else { $sp85154b[] = array('type' => $spb40563, 'value' => $sp0a5dca);
 } $spe1a85c = substr($spe1a85c, $sp182121 + $sp798390);
 $spc704fd -= $sp182121 + $sp798390;
 } if (strlen($spe1a85c) > 0) { $sp85154b[] = $spe1a85c;
 } return $sp85154b;
 } protected function escape($sp059473) { return '\'' . $this->get()->real_escape_string(strval($sp059473)) . '\'';
 } protected function sanitize($spc1f8c3) { if (is_object($spc1f8c3)) { if ($spc1f8c3 instanceof MeekroDBEval) { return $spc1f8c3->text;
 } else { if ($spc1f8c3 instanceof DateTime) { return $this->escape($spc1f8c3->format('Y-m-d H:i:s'));
 } else { return '';
 } } } if (is_null($spc1f8c3)) { return $this->usenull ? 'NULL' : '\'\'';
 } else { if (is_bool($spc1f8c3)) { return $spc1f8c3 ? 1 : 0;
 } else { if (is_int($spc1f8c3)) { return $spc1f8c3;
 } else { if (is_float($spc1f8c3)) { return $spc1f8c3;
 } else { if (is_array($spc1f8c3)) { if (array_values($spc1f8c3) === $spc1f8c3) { if (is_array($spc1f8c3[0])) { return implode(', ', array_map(array($this, 'sanitize'), $spc1f8c3));
 } else { return '(' . implode(', ', array_map(array($this, 'sanitize'), $spc1f8c3)) . ')';
 } } $sp61a35f = array();
 foreach ($spc1f8c3 as $sp027ae6 => $sp42824e) { $sp61a35f[] = $this->formatTableName($sp027ae6) . '=' . $this->sanitize($sp42824e);
 } return implode(', ', $sp61a35f);
 } else { return $this->escape($spc1f8c3);
 } } } } } } protected function parseTS($sp69869a) { if (is_string($sp69869a)) { return date('Y-m-d H:i:s', strtotime($sp69869a));
 } else { if (is_object($sp69869a) && $sp69869a instanceof DateTime) { return $sp69869a->format('Y-m-d H:i:s');
 } } } protected function intval($sp87f84e) { if (PHP_INT_SIZE == 8) { return intval($sp87f84e);
 } return floor(doubleval($sp87f84e));
 } protected function parseQueryParams() { $spc3b0e0 = func_get_args();
 $sp85154b = call_user_func_array(array($this, 'preparseQueryParams'), $spc3b0e0);
 $sp4a5033 = '';
 $spec8014 = array('ls', 'li', 'ld', 'lb', 'll', 'lt');
 foreach ($sp85154b as $sp8f7d63) { if (is_string($sp8f7d63)) { $sp4a5033 .= $sp8f7d63;
 continue;
 } $spb40563 = $sp8f7d63['type'];
 $sp0a5dca = $sp8f7d63['value'];
 $sp38622e = '';
 if ($spb40563 != '?') { $sp90ce9d = in_array($spb40563, $spec8014, true);
 if ($sp90ce9d && !is_array($sp0a5dca)) { $this->nonSQLError('Badly formatted SQL query: Expected array, got scalar instead!');
 } else { if (!$sp90ce9d && is_array($sp0a5dca)) { $this->nonSQLError('Badly formatted SQL query: Expected scalar, got array instead!');
 } } } if ($spb40563 == 's') { $sp38622e = $this->escape($sp0a5dca);
 } else { if ($spb40563 == 'i') { $sp38622e = $this->intval($sp0a5dca);
 } else { if ($spb40563 == 'd') { $sp38622e = doubleval($sp0a5dca);
 } else { if ($spb40563 == 'b') { $sp38622e = $this->formatTableName($sp0a5dca);
 } else { if ($spb40563 == 'l') { $sp38622e = $sp0a5dca;
 } else { if ($spb40563 == 'ss') { $sp38622e = $this->escape('%' . str_replace(array('%', '_'), array('\\%', '\\_'), $sp0a5dca) . '%');
 } else { if ($spb40563 == 't') { $sp38622e = $this->escape($this->parseTS($sp0a5dca));
 } else { if ($spb40563 == 'ls') { $sp38622e = array_map(array($this, 'escape'), $sp0a5dca);
 } else { if ($spb40563 == 'li') { $sp38622e = array_map(array($this, 'intval'), $sp0a5dca);
 } else { if ($spb40563 == 'ld') { $sp38622e = array_map('doubleval', $sp0a5dca);
 } else { if ($spb40563 == 'lb') { $sp38622e = array_map(array($this, 'formatTableName'), $sp0a5dca);
 } else { if ($spb40563 == 'll') { $sp38622e = $sp0a5dca;
 } else { if ($spb40563 == 'lt') { $sp38622e = array_map(array($this, 'escape'), array_map(array($this, 'parseTS'), $sp0a5dca));
 } else { if ($spb40563 == '?') { $sp38622e = $this->sanitize($sp0a5dca);
 } else { $this->nonSQLError("Badly formatted SQL query: Invalid MeekroDB param {$spb40563}");
 } } } } } } } } } } } } } } if (is_array($sp38622e)) { $sp38622e = '(' . implode(',', $sp38622e) . ')';
 } $sp4a5033 .= $sp38622e;
 } return $sp4a5033;
 } protected function prependCall($sp363580, $spc3b0e0, $sp73aaa1) { array_unshift($spc3b0e0, $sp73aaa1);
 return call_user_func_array($sp363580, $spc3b0e0);
 } public function query() { $spc3b0e0 = func_get_args();
 return $this->prependCall(array($this, 'queryHelper'), $spc3b0e0, 'assoc');
 } public function queryAllLists() { $spc3b0e0 = func_get_args();
 return $this->prependCall(array($this, 'queryHelper'), $spc3b0e0, 'list');
 } public function queryFullColumns() { $spc3b0e0 = func_get_args();
 return $this->prependCall(array($this, 'queryHelper'), $spc3b0e0, 'full');
 } public function queryRaw() { $spc3b0e0 = func_get_args();
 return $this->prependCall(array($this, 'queryHelper'), $spc3b0e0, 'raw_buf');
 } public function queryRawUnbuf() { $spc3b0e0 = func_get_args();
 return $this->prependCall(array($this, 'queryHelper'), $spc3b0e0, 'raw_unbuf');
 } protected function queryHelper() { $spc3b0e0 = func_get_args();
 $spb40563 = array_shift($spc3b0e0);
 $sp2c6a71 = $this->get();
 $speb3193 = true;
 $sp2d1fc1 = 'assoc';
 $sp1c742e = false;
 switch ($spb40563) { case 'assoc': break;
 case 'list': $sp2d1fc1 = 'list';
 break;
 case 'full': $sp2d1fc1 = 'list';
 $sp1c742e = true;
 break;
 case 'raw_buf': $sp2d1fc1 = 'raw';
 break;
 case 'raw_unbuf': $speb3193 = false;
 $sp2d1fc1 = 'raw';
 break;
 default: $this->nonSQLError('Error -- invalid argument to queryHelper!');
 } $spe1a85c = call_user_func_array(array($this, 'parseQueryParams'), $spc3b0e0);
 if ($this->success_handler) { $sp21ffab = microtime(true);
 } $sp38622e = $sp2c6a71->query($spe1a85c, $speb3193 ? MYSQLI_STORE_RESULT : MYSQLI_USE_RESULT);
 if ($this->success_handler) { $sp0dd564 = microtime(true) - $sp21ffab;
 } else { $sp0dd564 = 0;
 } if (!$spe1a85c || $sp2c6a71->error) { if ($this->error_handler) { $spc0e7a7 = is_callable($this->error_handler) ? $this->error_handler : 'meekrodb_error_handler';
 call_user_func($spc0e7a7, array('type' => 'sql', 'query' => $spe1a85c, 'error' => $sp2c6a71->error, 'code' => $sp2c6a71->errno));
 } if ($this->throw_exception_on_error) { $sp8f120e = new MeekroDBException($sp2c6a71->error, $spe1a85c, $sp2c6a71->errno);
 throw $sp8f120e;
 } } else { if ($this->success_handler) { $sp0dd564 = sprintf('%f', $sp0dd564 * 1000);
 $sp1724d7 = is_callable($this->success_handler) ? $this->success_handler : 'meekrodb_debugmode_handler';
 call_user_func($sp1724d7, array('query' => $spe1a85c, 'runtime' => $sp0dd564, 'affected' => $sp2c6a71->affected_rows));
 } } $this->insert_id = $sp2c6a71->insert_id;
 $this->affected_rows = $sp2c6a71->affected_rows;
 if ($speb3193 && $sp38622e instanceof MySQLi_Result) { $this->num_rows = $sp38622e->num_rows;
 } else { $this->num_rows = null;
 } if ($sp2d1fc1 == 'raw' || !$sp38622e instanceof MySQLi_Result) { return $sp38622e;
 } $spdf16dc = array();
 if ($sp1c742e) { $sp2dde21 = array();
 foreach ($sp38622e->fetch_fields() as $sp93e628) { if (strlen($sp93e628->table)) { $sp2dde21[] = $sp93e628->table . '.' . $sp93e628->name;
 } else { $sp2dde21[] = $sp93e628->name;
 } } } while ($sp7c7a30 = $sp2d1fc1 == 'assoc' ? $sp38622e->fetch_assoc() : $sp38622e->fetch_row()) { if ($sp1c742e) { $sp7c7a30 = array_combine($sp2dde21, $sp7c7a30);
 } $spdf16dc[] = $sp7c7a30;
 } $sp38622e->free();
 while ($sp2c6a71->more_results()) { $sp2c6a71->next_result();
 if ($sp38622e = $sp2c6a71->use_result()) { $sp38622e->free();
 } } return $spdf16dc;
 } public function queryOneRow() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array($this, 'queryFirstRow'), $spc3b0e0);
 } public function queryFirstRow() { $spc3b0e0 = func_get_args();
 $sp38622e = call_user_func_array(array($this, 'query'), $spc3b0e0);
 if (!$sp38622e || !is_array($sp38622e)) { return null;
 } return reset($sp38622e);
 } public function queryOneList() { $spc3b0e0 = func_get_args();
 return call_user_func_array(array($this, 'queryFirstList'), $spc3b0e0);
 } public function queryFirstList() { $spc3b0e0 = func_get_args();
 $sp38622e = call_user_func_array(array($this, 'queryAllLists'), $spc3b0e0);
 if (!$sp38622e || !is_array($sp38622e)) { return null;
 } return reset($sp38622e);
 } public function queryFirstColumn() { $spc3b0e0 = func_get_args();
 $sp381865 = call_user_func_array(array($this, 'queryAllLists'), $spc3b0e0);
 $spa9ebec = array();
 if (!count($sp381865) || !count($sp381865[0])) { return $spa9ebec;
 } foreach ($sp381865 as $sp7c7a30) { $spa9ebec[] = $sp7c7a30[0];
 } return $spa9ebec;
 } public function queryOneColumn() { $spc3b0e0 = func_get_args();
 $sp7e8784 = array_shift($spc3b0e0);
 $sp381865 = call_user_func_array(array($this, 'query'), $spc3b0e0);
 $spa9ebec = array();
 if (!count($sp381865) || !count($sp381865[0])) { return $spa9ebec;
 } if ($sp7e8784 === null) { $sp75a40b = array_keys($sp381865[0]);
 $sp7e8784 = $sp75a40b[0];
 } foreach ($sp381865 as $sp7c7a30) { $spa9ebec[] = $sp7c7a30[$sp7e8784];
 } return $spa9ebec;
 } public function queryFirstField() { $spc3b0e0 = func_get_args();
 $sp7c7a30 = call_user_func_array(array($this, 'queryFirstList'), $spc3b0e0);
 if ($sp7c7a30 == null) { return null;
 } return $sp7c7a30[0];
 } public function queryOneField() { $spc3b0e0 = func_get_args();
 $sp7e8784 = array_shift($spc3b0e0);
 $sp7c7a30 = call_user_func_array(array($this, 'queryOneRow'), $spc3b0e0);
 if ($sp7c7a30 == null) { return null;
 } else { if ($sp7e8784 === null) { $sp75a40b = array_keys($sp7c7a30);
 $sp7e8784 = $sp75a40b[0];
 } } return $sp7c7a30[$sp7e8784];
 } } class WhereClause { public $type = 'and';
 public $negate = false;
 public $clauses = array();
 function __construct($spb40563) { $spb40563 = strtolower($spb40563);
 if ($spb40563 !== 'or' && $spb40563 !== 'and') { DB1::nonSQLError('you must use either WhereClause(and) or WhereClause(or)');
 } $this->type = $spb40563;
 } function add() { $spc3b0e0 = func_get_args();
 $spe1a85c = array_shift($spc3b0e0);
 if ($spe1a85c instanceof WhereClause) { $this->clauses[] = $spe1a85c;
 } else { $this->clauses[] = array('sql' => $spe1a85c, 'args' => $spc3b0e0);
 } } function negateLast() { $sp6a95ff = count($this->clauses) - 1;
 if (!isset($this->clauses[$sp6a95ff])) { return;
 } if ($this->clauses[$sp6a95ff] instanceof WhereClause) { $this->clauses[$sp6a95ff]->negate();
 } else { $this->clauses[$sp6a95ff]['sql'] = 'NOT (' . $this->clauses[$sp6a95ff]['sql'] . ')';
 } } function negate() { $this->negate = !$this->negate;
 } function addClause($spb40563) { $sp0b9dce = new WhereClause($spb40563);
 $this->add($sp0b9dce);
 return $sp0b9dce;
 } function count() { return count($this->clauses);
 } function textAndArgs() { $spe1a85c = array();
 $spc3b0e0 = array();
 if (count($this->clauses) == 0) { return array('(1)', $spc3b0e0);
 } foreach ($this->clauses as $spff49e2) { if ($spff49e2 instanceof WhereClause) { list($sp827ef8, $sp380680) = $spff49e2->textAndArgs();
 } else { $sp827ef8 = $spff49e2['sql'];
 $sp380680 = $spff49e2['args'];
 } $spe1a85c[] = "({$sp827ef8})";
 $spc3b0e0 = array_merge($spc3b0e0, $sp380680);
 } if ($this->type == 'and') { $spe1a85c = implode(' AND ', $spe1a85c);
 } else { $spe1a85c = implode(' OR ', $spe1a85c);
 } if ($this->negate) { $spe1a85c = '(NOT ' . $spe1a85c . ')';
 } return array($spe1a85c, $spc3b0e0);
 } function text() { return $this;
 } } class DBTransaction { private $committed = false;
 function __construct() { DB1::startTransaction();
 } function __destruct() { if (!$this->committed) { DB1::rollback();
 } } function commit() { DB1::commit();
 $this->committed = true;
 } } class MeekroDBException extends Exception { protected $query = '';
 function __construct($spd76c7f = '', $sp4a5033 = '', $spa9cf2c = 0) { parent::__construct($spd76c7f);
 $this->query = $sp4a5033;
 $this->code = $spa9cf2c;
 } public function getQuery() { return $this->query;
 } } class DBHelper { public static function verticalSlice($sp207c72, $spdf7dd8, $sp67a482 = null) { $sp207c72 = (array) $sp207c72;
 $sp3039c4 = array();
 foreach ($sp207c72 as $sp03747f) { if (!array_key_exists($spdf7dd8, $sp03747f)) { die('verticalSlice: array doesn\'t have requested field
');
 } if ($sp67a482) { if (!array_key_exists($sp67a482, $sp03747f)) { die('verticalSlice: array doesn\'t have requested field
');
 } $sp3039c4[$sp03747f[$sp67a482]] = $sp03747f[$spdf7dd8];
 } else { $sp3039c4[] = $sp03747f[$spdf7dd8];
 } } return $sp3039c4;
 } public static function reIndex() { $sp1b9bde = func_get_args();
 $sp207c72 = array_shift($sp1b9bde);
 $sp207c72 = (array) $sp207c72;
 $sp3039c4 = array();
 foreach ($sp207c72 as $sp03747f) { $sp38fce6 =& $sp3039c4;
 foreach ($sp1b9bde as $spdf7dd8) { if (!array_key_exists($spdf7dd8, $sp03747f)) { die('reIndex: array doesn\'t have requested field
');
 } $sp74ab1e = $sp03747f[$spdf7dd8];
 $sp38fce6 =& $sp38fce6[$sp74ab1e];
 } $sp38fce6 = $sp03747f;
 } return $sp3039c4;
 } } function meekrodb_error_handler($spfbee46) { if (isset($spfbee46['query'])) { $sp49c2ac[] = 'QUERY: ' . $spfbee46['query'];
 } if (isset($spfbee46['error'])) { $sp49c2ac[] = 'ERROR: ' . $spfbee46['error'];
 } $sp49c2ac[] = '';
 if (php_sapi_name() == 'cli' && empty($_SERVER['REMOTE_ADDR'])) { echo implode('
', $sp49c2ac);
 } else { echo implode('<br>
', $sp49c2ac);
 } die;
 } function meekrodb_debugmode_handler($spfbee46) { echo 'QUERY: ' . $spfbee46['query'] . ' [' . $spfbee46['runtime'] . ' ms]';
 if (php_sapi_name() == 'cli' && empty($_SERVER['REMOTE_ADDR'])) { echo '
';
 } else { echo '<br>
';
 } } class MeekroDBEval { public $text = '';
 function __construct($sp2d0e1a) { $this->text = $sp2d0e1a;
 } }